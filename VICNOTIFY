local Notification = {}
Notification.__index = Notification

local ts = game:GetService("TweenService")
local ss = game:GetService("SoundService")
local txtS = game:GetService("TextService")
local Players = game:GetService("Players")

-- Sound setup
local openSound = Instance.new("Sound")
openSound.Name = "OpenNotifSound"
openSound.Volume = 1
openSound.SoundId = "rbxassetid://9128519965"
openSound.Parent = ss
pcall(function()
    game:GetService("ContentProvider"):PreloadAsync({openSound})
end)

local closeSound = Instance.new("Sound")
closeSound.Name = "CloseNotifSound"
closeSound.Volume = 1
closeSound.SoundId = "rbxassetid://9128519965"
closeSound.Parent = ss
pcall(function()
    game:GetService("ContentProvider"):PreloadAsync({closeSound})
end)

-- GUI setup
local notifications = Instance.new("ScreenGui")
notifications.Name = "notifications"
notifications.ZIndexBehavior = Enum.ZIndexBehavior.Global
notifications.ResetOnSpawn = false

local function getParentGui()
    local success, result = pcall(function()
        return game:GetService("CoreGui")
    end)
    if success then
        return result
    else
        Notification.new("warning", "CoreGui Access Failed", "Falling back to PlayerGui.")
        return Players.LocalPlayer:WaitForChild("PlayerGui")
    end
end
notifications.Parent = getParentGui()

local previousUiExists = notifications.Parent:FindFirstChild("notifications")
if previousUiExists then previousUiExists:Destroy() end

local notifsHolderFrame = Instance.new("Frame")
notifsHolderFrame.Name = "notifsHolderFrame"
notifsHolderFrame.Parent = notifications
notifsHolderFrame.AnchorPoint = Vector2.new(1, 0) -- Changed to top-right
notifsHolderFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
notifsHolderFrame.BackgroundTransparency = 1
notifsHolderFrame.BorderSizePixel = 0
notifsHolderFrame.ClipsDescendants = true
notifsHolderFrame.Position = UDim2.new(1, -10, 0, 50) -- Moved up (50 pixels from top)
notifsHolderFrame.Size = UDim2.fromScale(0.3, 0.4) -- Slightly larger

local notifHolderListLayout = Instance.new("UIListLayout")
notifHolderListLayout.Name = "notifHolderListLayout"
notifHolderListLayout.Parent = notifsHolderFrame
notifHolderListLayout.SortOrder = Enum.SortOrder.LayoutOrder
notifHolderListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
notifHolderListLayout.VerticalAlignment = Enum.VerticalAlignment.Top -- Changed to top
notifHolderListLayout.Padding = UDim.new(0, 6)

-- Notification templates
local function createTemplate(name, primaryColor, secondaryColor, imageId)
    local template = Instance.new("Frame")
    template.Name = name
    template.AnchorPoint = Vector2.new(1, 0)
    template.BackgroundColor3 = primaryColor
    template.BackgroundTransparency = 1
    template.Position = UDim2.new(1, 0, 0, 0)
    template.Size = UDim2.new(1, 0, 0, 50) -- Increased default height

    local templateFrame = Instance.new("Frame")
    templateFrame.Name = "templateFrame"
    templateFrame.Parent = template
    templateFrame.BackgroundColor3 = primaryColor
    templateFrame.BorderSizePixel = 0
    templateFrame.Size = UDim2.new(1, 0, 1, 0)

    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, primaryColor),
        ColorSequenceKeypoint.new(1, primaryColor:Lerp(Color3.fromRGB(255, 255, 255), 0.2))
    })
    gradient.Rotation = 45
    gradient.Parent = templateFrame

    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 2
    stroke.Color = secondaryColor
    stroke.Transparency = 0.3
    stroke.Parent = templateFrame

    local templateCorner = Instance.new("UICorner")
    templateCorner.CornerRadius = UDim.new(0, 8)
    templateCorner.Parent = templateFrame

    local severityFrame = Instance.new("Frame")
    severityFrame.Name = "severityFrame"
    severityFrame.Parent = templateFrame
    severityFrame.BackgroundColor3 = secondaryColor
    severityFrame.Size = UDim2.new(0, 12, 1, 0)

    local severityCorner = Instance.new("UICorner")
    severityCorner.CornerRadius = UDim.new(0, 8)
    severityCorner.Parent = severityFrame

    local hideSeverityCornerFrame = Instance.new("Frame")
    hideSeverityCornerFrame.Name = "hideSeverityCornerFrame"
    hideSeverityCornerFrame.Parent = severityFrame
    hideSeverityCornerFrame.BackgroundColor3 = primaryColor
    hideSeverityCornerFrame.BorderSizePixel = 0
    hideSeverityCornerFrame.Position = UDim2.new(0.5, 0, 0, 0)
    hideSeverityCornerFrame.Size = UDim2.new(0.5, 0, 1, 0)

    local image = Instance.new("ImageLabel")
    image.Name = "image"
    image.Parent = templateFrame
    image.AnchorPoint = Vector2.new(0, 0.5)
    image.BackgroundTransparency = 1
    image.Position = UDim2.new(0, 20, 0.5, 0)
    image.Size = UDim2.new(0, 24, 0, 24)
    image.Image = imageId
    image.ImageColor3 = secondaryColor

    local informationFrame = Instance.new("Frame")
    informationFrame.Name = "informationFrame"
    informationFrame.Parent = templateFrame
    informationFrame.BackgroundTransparency = 1
    informationFrame.Position = UDim2.new(0, 50, 0, 5)
    informationFrame.Size = UDim2.new(1, -80, 1, -10)

    local headingText = Instance.new("TextLabel")
    headingText.Name = "headingText"
    headingText.Parent = informationFrame
    headingText.BackgroundTransparency = 1
    headingText.ClipsDescendants = true
    headingText.Size = UDim2.new(1, 0, 0, 24)
    headingText.Font = Enum.Font.GothamBold
    headingText.Text = name:upper()
    headingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    headingText.TextSize = 16
    headingText.TextXAlignment = Enum.TextXAlignment.Left
    headingText.TextYAlignment = Enum.TextYAlignment.Bottom

    local strokeHeading = Instance.new("UIStroke")
    strokeHeading.Thickness = 1
    strokeHeading.Color = secondaryColor
    strokeHeading.Transparency = 0.5
    strokeHeading.Parent = headingText

    local bodyText = Instance.new("TextLabel")
    bodyText.Name = "bodyText"
    bodyText.Parent = informationFrame
    bodyText.BackgroundTransparency = 1
    bodyText.ClipsDescendants = true
    bodyText.Position = UDim2.new(0, 0, 0, 26)
    bodyText.Size = UDim2.new(1, 0, 1, -26)
    bodyText.Font = Enum.Font.GothamMedium
    bodyText.Text = name .. " message"
    bodyText.TextColor3 = Color3.fromRGB(255, 255, 255)
    bodyText.TextSize = 14
    bodyText.TextWrapped = true
    bodyText.TextXAlignment = Enum.TextXAlignment.Left
    bodyText.TextYAlignment = Enum.TextYAlignment.Top

    local cornerHidingFrame = Instance.new("Frame")
    cornerHidingFrame.Name = "cornerHidingFrame"
    cornerHidingFrame.Parent = templateFrame
    cornerHidingFrame.AnchorPoint = Vector2.new(1, 0)
    cornerHidingFrame.BackgroundColor3 = primaryColor
    cornerHidingFrame.BorderSizePixel = 0
    cornerHidingFrame.Position = UDim2.new(1, 0, 0, 0)
    cornerHidingFrame.Size = UDim2.new(0.1, 0, 1, 0)
    cornerHidingFrame.ZIndex = 0

    local closeButton = Instance.new("ImageButton")
    closeButton.Name = "closeButton"
    closeButton.Parent = templateFrame
    closeButton.AnchorPoint = Vector2.new(1, 0.5)
    closeButton.BackgroundTransparency = 1
    closeButton.Position = UDim2.new(1, -10, 0.5, 0)
    closeButton.Size = UDim2.new(0, 18, 0, 18)
    closeButton.Image = "rbxassetid://9127564477"
    closeButton.ImageColor3 = secondaryColor

    return template
end

local errorTemplate = createTemplate("error", Color3.fromRGB(255, 207, 203), Color3.fromRGB(236, 88, 76), "rbxassetid://9072920609")
local infoTemplate = createTemplate("info", Color3.fromRGB(204, 226, 254), Color3.fromRGB(50, 131, 226), "rbxassetid://9072944922")
local messageTemplate = createTemplate("message", Color3.fromRGB(233, 233, 235), Color3.fromRGB(112, 118, 130), "") -- No icon for message
local successTemplate = createTemplate("success", Color3.fromRGB(196, 247, 221), Color3.fromRGB(50, 195, 125), "rbxassetid://9073052584")
local warningTemplate = createTemplate("warning", Color3.fromRGB(255, 232, 197), Color3.fromRGB(234, 159, 53), "rbxassetid://9072448788")

local function scaleNotifHolderMaxNotifs()
    local amountOfNotifsInFrame = math.floor(notifsHolderFrame.AbsoluteSize.Y / 50)
    local notifsHolderFramePadding = amountOfNotifsInFrame * notifHolderListLayout.Padding.Offset
    notifsHolderFrame.Size = UDim2.new(0.3, 0, 0, amountOfNotifsInFrame * 50 + notifsHolderFramePadding)
end

local function deleteNotifsOutsideFrame()
    if notifHolderListLayout.AbsoluteContentSize.Y < notifsHolderFrame.AbsoluteSize.Y then return end
    for _, notif in pairs(notifsHolderFrame:GetChildren()) do
        if not notif:IsA("Frame") then continue end
        if notif.AbsolutePosition.Y + notif.AbsoluteSize.Y < notifsHolderFrame.AbsolutePosition.Y then
            notif:Destroy()
        end
    end
end

function Notification.new(notifType, heading, body, autoRemove, autoRemoveTime, callback)
    local notificationTypes = {
        ["error"] = errorTemplate,
        ["info"] = infoTemplate,
        ["message"] = messageTemplate,
        ["success"] = successTemplate,
        ["warning"] = warningTemplate
    }

    local notif = notificationTypes[notifType:lower()]
    assert(notif, "Notification type not valid\nValid Types: {\n\tError\n\tInfo\n\tMessage\n\tSuccess\n\tWarning\n}")
    notif = notif:Clone()
    notif.templateFrame.Position = UDim2.new(1, 50, 0, 0)
    notif.templateFrame.Transparency = 1
    notif.templateFrame.Size = UDim2.new(1, 0, 1, 0, 0.8) -- Start slightly smaller

    local function checkTextSize()
        local infoFrame = notif.templateFrame.informationFrame
        local requiredHeadingSize = txtS:GetTextSize(infoFrame.headingText.Text, infoFrame.headingText.TextSize, infoFrame.headingText.Font, Vector2.new(10000, 10000)).Y
        local requiredBodySize = txtS:GetTextSize(infoFrame.bodyText.Text, infoFrame.bodyText.TextSize, infoFrame.bodyText.Font, Vector2.new(notifsHolderFrame.AbsoluteSize.X - 80, 10000)).Y
        local totalHeight = requiredHeadingSize + requiredBodySize + 15
        if totalHeight > 50 then
            notif.Size = UDim2.new(1, 0, 0, totalHeight)
            notif.templateFrame.Size = UDim2.new(1, 0, 1, 0)
        end
        if txtS:GetTextSize(infoFrame.headingText.Text, infoFrame.headingText.TextSize, infoFrame.headingText.Font, Vector2.new(10000, 10000)).X + 80 > notifsHolderFrame.AbsoluteSize.X then
            warn("Heading size is too long (Notification Library)")
        end
        if txtS:GetTextSize(infoFrame.bodyText.Text, infoFrame.bodyText.TextSize, infoFrame.bodyText.Font, Vector2.new(10000, 10000)).X + 80 > notifsHolderFrame.AbsoluteSize.X then
            warn("Body size is too long (Notification Library)")
        end
    end

    local function openNotif()
        pcall(function() openSound:Play() end)
        local tweenIn = ts:Create(notif.templateFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
            Position = UDim2.new(0, 0, 0, 0),
            Transparency = 0,
            Size = UDim2.new(1, 0, 1, 0)
        })
        tweenIn:Play()
    end

    local function closeNotif()
        coroutine.wrap(function()
            pcall(function() closeSound:Play() end)
            local tweenOut = ts:Create(notif.templateFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
                Position = UDim2.new(1, 50, 0, 0),
                Transparency = 1,
                Size = UDim2.new(1, 0, 1, 0, 0.8)
            })
            tweenOut:Play()
            tweenOut.Completed:Wait()
            if callback then callback() end
            notif:Destroy()
        end)()
    end

    notif.templateFrame.closeButton.MouseButton1Click:Connect(closeNotif)
    notif.templateFrame.informationFrame.headingText.Text = heading
    notif.templateFrame.informationFrame.bodyText.Text = body
    notif.Parent = notifsHolderFrame
    checkTextSize()
    openNotif()

    if autoRemove then
        coroutine.wrap(function()
            autoRemoveTime = autoRemoveTime or 5
            task.wait(autoRemoveTime)
            if notif and notif:FindFirstChild("templateFrame") then
                closeNotif()
            end
        end)()
    end

    local newNotif = setmetatable({}, Notification)
    newNotif.Instance = notif
    newNotif.Heading = heading
    newNotif.Body = body
    newNotif.Type = notifType:lower()
    newNotif.IsClosing = false

    return newNotif
end

function Notification:changeHeading(newHeading)
    coroutine.wrap(function()
        if not self.Instance or not self.Instance:FindFirstChild("templateFrame") then return end
        self.Instance.templateFrame.informationFrame.headingText.Text = newHeading
        self.Heading = newHeading
    end)()
end

function Notification:changeBody(newBody)
    coroutine.wrap(function()
        if not self.Instance or not self.Instance:FindFirstChild("templateFrame") then return end
        self.Instance.templateFrame.informationFrame.bodyText.Text = newBody
        self.Body = newBody
        local requiredBodySize = txtS:GetTextSize(newBody, self.Instance.templateFrame.informationFrame.bodyText.TextSize, self.Instance.templateFrame.informationFrame.bodyText.Font, Vector2.new(notifsHolderFrame.AbsoluteSize.X - 80, 10000)).Y
        local requiredHeadingSize = txtS:GetTextSize(self.Instance.templateFrame.informationFrame.headingText.Text, self.Instance.templateFrame.informationFrame.headingText.TextSize, self.Instance.templateFrame.informationFrame.headingText.Font, Vector2.new(10000, 10000)).Y
        local totalHeight = requiredHeadingSize + requiredBodySize + 15
        if totalHeight > 50 then
            self.Instance.Size = UDim2.new(1, 0, 0, totalHeight)
            self.Instance.templateFrame.Size = UDim2.new(1, 0, 1, 0)
        end
    end)()
end

function Notification:deleteTimeout(waitTime)
    if self.IsClosing then return end
    self.IsClosing = true
    coroutine.wrap(function()
        if not self.Instance or not self.Instance:FindFirstChild("templateFrame") then return end
        waitTime = waitTime or 3
        task.wait(waitTime)
        local closeTween = ts:Create(self.Instance.templateFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 50, 0, 0),
            Transparency = 1,
            Size = UDim2.new(1, 0, 1, 0, 0.8)
        })
        pcall(function() closeSound:Play() end)
        closeTween:Play()
        closeTween.Completed:Wait()
        if self.Instance then
            self.Instance:Destroy()
        end
    end)()
end

function Notification:delete()
    if self.IsClosing then return end
    self.IsClosing = true
    coroutine.wrap(function()
        if not self.Instance or not self.Instance:FindFirstChild("templateFrame") then return end
        local closeTween = ts:Create(self.Instance.templateFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {
            Position = UDim2.new(1, 50, 0, 0),
            Transparency = 1,
            Size = UDim2.new(1, 0, 1, 0, 0.8)
        })
        pcall(function() closeSound:Play() end)
        closeTween:Play()
        closeTween.Completed:Wait()
        if self.Instance then
            self.Instance:Destroy()
        end
    end)()
end

function Notification:changeColor(primary, secondary, textColor)
    coroutine.wrap(function()
        if not self.Instance or not self.Instance:FindFirstChild("templateFrame") then return end
        local templateFrame = self.Instance.templateFrame
        
        if primary then
            templateFrame.BackgroundColor3 = primary
            templateFrame.cornerHidingFrame.BackgroundColor3 = primary
            templateFrame.severityFrame.hideSeverityCornerFrame.BackgroundColor3 = primary
            templateFrame.UIGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, primary),
                ColorSequenceKeypoint.new(1, primary:Lerp(Color3.fromRGB(255, 255, 255), 0.2))
            })
        end

        if secondary then
            templateFrame.severityFrame.BackgroundColor3 = secondary
            templateFrame.closeButton.ImageColor3 = secondary
            templateFrame.UIStroke.Color = secondary
            templateFrame.informationFrame.headingText.UIStroke.Color = secondary
            if self.Type ~= "message" then
                templateFrame.image.ImageColor3 = secondary
            end
        end

        if textColor then
            templateFrame.informationFrame.headingText.TextColor3 = textColor
            templateFrame.informationFrame.bodyText.TextColor3 = textColor
        end
    end)()
end

scaleNotifHolderMaxNotifs()
notifHolderListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(deleteNotifsOutsideFrame)
return Notification

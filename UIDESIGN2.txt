local RobloxReplicatedStorage = cloneref(game:GetService('RobloxReplicatedStorage'))
local RbxAnalyticsService = cloneref(game:GetService('RbxAnalyticsService'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local UserInputService = cloneref(game:GetService('UserInputService'))
local NetworkClient = cloneref(game:GetService("NetworkClient"))
local TweenService = cloneref(game:GetService('TweenService'))
local VirtualUser = cloneref(game:GetService('VirtualUser'))
local HttpService = cloneref(game:GetService('HttpService'))
local RunService = cloneref(game:GetService('RunService'))
local LogService = cloneref(game:GetService('LogService'))
local Lighting = cloneref(game:GetService('Lighting'))
local CoreGui = cloneref(game:GetService('CoreGui'))
local Players = cloneref(game:GetService('Players'))
local Debris = cloneref(game:GetService('Debris'))
local Stats = cloneref(game:GetService('Stats'))
local CollectionService = game:GetService("CollectionService")
local VirtualInputManager = cloneref(game:GetService("VirtualInputManager"))
local Workspace = cloneref(game:GetService('Workspace'))
local ContentProvider = cloneref(game:GetService("ContentProvider"))
getgenv().namehub = "VicoX"

local LocalPlayer = Players.LocalPlayer

local TextService = cloneref(game:GetService('TextService'))
local Mouse = LocalPlayer:GetMouse()

getgenv().GG = {
    Language = {
        CheckboxEnabled = "Enabled",
        CheckboxDisabled = "Disabled",
        SliderValue = "Value",
        DropdownSelect = "Select",
        DropdownNone = "None",
        DropdownSelected = "Selected",
        ButtonClick = "Click",
        TextboxEnter = "Enter",
        ModuleEnabled = "Enabled",
        ModuleDisabled = "Disabled",
        TabGeneral = "General",
        TabSettings = "Settings",
        Loading = "Loading...",
        Error = "Error",
        Success = "Success"
    }
}

local SelectedLanguage = GG.Language

function convertStringToTable(inputString)
    local result = {}
    for value in string.gmatch(inputString, "([^,]+)") do
        local trimmedValue = value:match("^%s*(.-)%s*$")
        table.insert(result, trimmedValue)
    end
    return result
end

function convertTableToString(inputTable)
    return table.concat(inputTable, ", ")
end

local Connections = setmetatable({
    disconnect = function(self, connection)
        if not self[connection] then
            return
        end
        self[connection]:Disconnect()
        self[connection] = nil
    end,
    disconnect_all = function(self)
        for _, value in self do
            if typeof(value) == 'function' then
                continue
            end
            value:Disconnect()
        end
    end
}, {__index = Connections})

local Util = setmetatable({
    map = function(self, value, in_minimum, in_maximum, out_minimum, out_maximum)
        return (value - in_minimum) * (out_maximum - out_minimum) / (in_maximum - in_minimum) + out_minimum
    end,
    viewport_point_to_world = function(self, location, distance)
        local unit_ray = workspace.CurrentCamera:ScreenPointToRay(location.X, location.Y)
        return unit_ray.Origin + unit_ray.Direction * distance
    end,
    get_offset = function(self)
        local viewport_size_Y = workspace.CurrentCamera.ViewportSize.Y
        return self:map(viewport_size_Y, 0, 2560, 8, 56)
    end
}, {__index = Util})

local AcrylicBlur = {}
AcrylicBlur.__index = AcrylicBlur

function AcrylicBlur.new(object)
    local self = setmetatable({
        _object = object,
        _folder = nil,
        _frame = nil,
        _root = nil
    }, AcrylicBlur)
    self:setup()
    return self
end

function AcrylicBlur:create_folder()
    local old_folder = workspace.CurrentCamera:FindFirstChild('AcrylicBlur')
    if old_folder then
        Debris:AddItem(old_folder, 0)
    end
    local folder = Instance.new('Folder')
    folder.Name = 'AcrylicBlur'
    folder.Parent = workspace.CurrentCamera
    self._folder = folder
end

function AcrylicBlur:create_depth_of_fields()
    local depth_of_fields = Lighting:FindFirstChild('AcrylicBlur') or Instance.new('DepthOfFieldEffect')
    depth_of_fields.FarIntensity = 0
    depth_of_fields.FocusDistance = 0.05
    depth_of_fields.InFocusRadius = 0.1
    depth_of_fields.NearIntensity = 1
    depth_of_fields.Name = 'AcrylicBlur'
    depth_of_fields.Parent = Lighting
    for _, object in Lighting:GetChildren() do
        if not object:IsA('DepthOfFieldEffect') then
            continue
        end
        if object == depth_of_fields then
            continue
        end
        Connections[object] = object:GetPropertyChangedSignal('FarIntensity'):Connect(function()
            object.FarIntensity = 0
        end)
        object.FarIntensity = 0
    end
end

function AcrylicBlur:create_frame()
    local frame = Instance.new('Frame')
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundTransparency = 1
    frame.Parent = self._object
    self._frame = frame
end

function AcrylicBlur:create_root()
    local part = Instance.new('Part')
    part.Name = 'Root'
    part.Color = Color3.new(0, 0, 0)
    part.Material = Enum.Material.Glass
    part.Size = Vector3.new(1, 1, 0)
    part.Anchored = true
    part.CanCollide = false
    part.CanQuery = false
    part.Locked = true
    part.CastShadow = false
    part.Transparency = 0.98
    part.Parent = self._folder
    local specialMesh = Instance.new('SpecialMesh')
    specialMesh.MeshType = Enum.MeshType.Brick
    specialMesh.Offset = Vector3.new(0, 0, -0.000001)
    specialMesh.Parent = part
    self._root = part
end

function AcrylicBlur:setup()
    if not workspace.CurrentCamera or not Lighting then
        warn("Camera or Lighting service unavailable for AcrylicBlur")
        return
    end
    self:create_depth_of_fields()
    self:create_folder()
    self:create_root()
    self:create_frame()
    self:render(0.001)
    self:check_quality_level()
end

function AcrylicBlur:render(distance)
    local positions = {
        top_left = Vector2.new(),
        top_right = Vector2.new(),
        bottom_right = Vector2.new(),
    }
    local function update_positions(size, position)
        positions.top_left = position
        positions.top_right = position + Vector2.new(size.X, 0)
        positions.bottom_right = position + size
    end
    local function update()
    local top_left = positions.top_left
    local top_right = positions.top_right
    local bottom_right = positions.bottom_right
    local top_left3D = Util:viewport_point_to_world(top_left, distance)
    local top_right3D = Util:viewport_point_to_world(top_right, distance)
    local bottom_right3D = Util:viewport_point_to_world(bottom_right, distance)
    local width = (top_right3D - top_left3D).Magnitude
    local height = (top_right3D - bottom_right3D).Magnitude
    if not self._root then
        return
    end
    self._root.CFrame = CFrame.fromMatrix(
        (top_left3D + bottom_right3D) / 2,
        workspace.CurrentCamera.CFrame.XVector,
        workspace.CurrentCamera.CFrame.YVector,
        workspace.CurrentCamera.CFrame.ZVector
    )
    local mesh = self._root:FindFirstChildOfClass("SpecialMesh")
    if mesh then
        mesh.Scale = Vector3.new(width, height, 0)
    end
end
    local function on_change()
        local offset = Util:get_offset()
        local size = self._frame.AbsoluteSize - Vector2.new(offset, offset)
        local position = self._frame.AbsolutePosition + Vector2.new(offset / 2, offset / 2)
        update_positions(size, position)
        task.spawn(update)
    end
    Connections['cframe_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('CFrame'):Connect(update)
    Connections['viewport_size_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(update)
    Connections['field_of_view_update'] = workspace.CurrentCamera:GetPropertyChangedSignal('FieldOfView'):Connect(update)
    Connections['frame_absolute_position'] = self._frame:GetPropertyChangedSignal('AbsolutePosition'):Connect(on_change)
    Connections['frame_absolute_size'] = self._frame:GetPropertyChangedSignal('AbsoluteSize'):Connect(on_change)
    task.spawn(update)
end

function AcrylicBlur:check_quality_level()
    local game_settings = UserSettings().GameSettings
    local quality_level = game_settings.SavedQualityLevel.Value
    if quality_level < 8 then
        self:change_visiblity(false)
    end
    Connections['quality_level'] = game_settings:GetPropertyChangedSignal('SavedQualityLevel'):Connect(function()
        local game_settings = UserSettings().GameSettings
        local quality_level = game_settings.SavedQualityLevel.Value
        self:change_visiblity(quality_level >= 8)
    end)
end

function AcrylicBlur:change_visiblity(state)
    self._root.Transparency = state and 0.98 or 1
end

function AcrylicBlur:destroy()
    Connections:disconnect('cframe_update')
    Connections:disconnect('viewport_size_update')
    Connections:disconnect('field_of_view_update')
    Connections:disconnect('frame_absolute_position')
    Connections:disconnect('frame_absolute_size')
    Connections:disconnect('quality_level')
    if self._folder then
        Debris:AddItem(self._folder, 0)
    end
    if self._frame then
        self._frame:Destroy()
    end
end

local Library = {}
Library.__index = Library
Library.slider_drag = false
Library._choosing_keybind = false
Library.flags = {}
Library.connections = {}

if not isfolder("cac hub") then
    makefolder("cac hub")
end

function Library:disconnect()
    for _, value in pairs(self.connections) do
        if self.connections[value] then
            self.connections[value]:Disconnect()
            self.connections[value] = nil
        end
    end
end

function Library:clear()
    for _, object in CoreGui:GetChildren() do
        if object.Name == "cac" and object ~= self.core then
            object:Destroy()
        end
    end
end

function Library:exist()
    if not self.core then return end
    if not self.core.Parent then return end
    return true
end

function Library:save_flags()
    if not self:exist() then return end
    local flags = HttpService:JSONEncode(self.flags)
    writefile(`cac hub/{game.GameId}.lua`, flags)
end

function Library:load_flags()
    if not isfile(`cac hub/{game.GameId}.lua`) then self:save_flags() return end
    local flags = readfile(`cac hub/{game.GameId}.lua`)
    if not flags then self:save_flags() return end
    self.flags = HttpService:JSONDecode(flags)
end

Library:load_flags()
Library:clear()

function Library:open()
    if not self.Container or not self.Shadow or not self.Mobile then
        warn("Library:open failed: Container, Shadow, or Mobile is nil")
        return
    end
    self.Container.Visible = true
    self.Shadow.Visible = true
    self.Mobile.Modal = true
    TweenService:Create(self.Container, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 699, 0, 426)
    }):Play()
    TweenService:Create(self.Shadow, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 776, 0, 509)
    }):Play()
end

function Library:close()
    if not self.Container or not self.Shadow or not self.Mobile then
        warn("Library:close failed: Container, Shadow, or Mobile is nil")
        return
    end
    TweenService:Create(self.Shadow, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 0, 0, 0)
    }):Play()
    local main_tween = TweenService:Create(self.Container, TweenInfo.new(0.4, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {
        Size = UDim2.new(0, 0, 0, 0)
    })
    main_tween:Play()
    main_tween.Completed:Once(function()
        if self.enabled then return end
        self.Container.Visible = false
        self.Shadow.Visible = false
        self.Mobile.Modal = false
    end)
end


function Library:drag()
	if not Library.drag_position then
		return
	end
	
	if not Library.start_position then
		return
	end
	
	local delta = self.input.Position - Library.drag_position
	local position = UDim2.new(Library.start_position.X.Scale, Library.start_position.X.Offset + delta.X, Library.start_position.Y.Scale, Library.start_position.Y.Offset + delta.Y)

	TweenService:Create(self.container.Container, TweenInfo.new(0.2), {
		Position = position
	}):Play()

    TweenService:Create(self.container.Shadow, TweenInfo.new(0.2), {
		Position = position
	}):Play()
end


function Library:visible()
	Library.enabled = not Library.enabled

	if Library.enabled then
		Library.open(self)
	else
		Library.close(self)
	end
end

local function createDescription(parent, desc, baseYPosition)
    local textBoundsParams = Instance.new("GetTextBoundsParams")
    textBoundsParams.Text = desc
    textBoundsParams.Font = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
    textBoundsParams.Size = 11
    textBoundsParams.Width = 190
    local textBounds = TextService:GetTextBoundsAsync(textBoundsParams)
    local descHeight = math.ceil(textBounds.Y) + 4

    parent.Size = UDim2.new(0, 220, 0, parent.Size.Y.Offset + descHeight)
    parent.ClipsDescendants = false

    local Description = Instance.new("TextLabel")
    Description.Name = "Description"
    Description.Size = UDim2.new(0, 190, 0, descHeight)
    Description.Position = UDim2.new(0.5, 0, baseYPosition, 0)
    Description.AnchorPoint = Vector2.new(0.5, 0.5)
    Description.BackgroundTransparency = 1
    Description.BorderSizePixel = 0
    Description.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
    Description.TextColor3 = Color3.fromRGB(150, 150, 200)
    Description.TextSize = 11
    Description.TextXAlignment = Enum.TextXAlignment.Left
    Description.TextYAlignment = Enum.TextYAlignment.Top
    Description.Text = desc
    Description.TextWrapped = true
    Description.TextTransparency = 1
    Description.ZIndex = 3
    Description.Parent = parent

    local function adjustDescriptionPosition()
        local parentAbsSize = parent.AbsoluteSize
        local descAbsSize = Description.AbsoluteSize
        local descAbsPos = Description.AbsolutePosition
        local parentAbsPos = parent.AbsolutePosition
        local maxY = parentAbsPos.Y + parentAbsSize.Y - descAbsSize.Y
        if descAbsPos.Y + descAbsSize.Y > maxY then
            Description.Position = UDim2.new(0.5, 0, 1, -descAbsSize.Y / 2 - 2)
        end
    end
    adjustDescriptionPosition()

    parent.MouseEnter:Connect(function()
        TweenService:Create(Description, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
    end)

    parent.MouseLeave:Connect(function()
        TweenService:Create(Description, TweenInfo.new(0.5, Enum.EasingStyle.Sine), {
            TextTransparency = 0.5
        }):Play()
    end)

    return descHeight
end




function Library:new()
    local container = Instance.new("ScreenGui")
    container.Name = "cac"
    container.Parent = game:GetService("CoreGui")
    self.core = container

    local Player = game.Players.LocalPlayer
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild("Humanoid")

    -- Define cohesive color scheme
    local primaryGradient = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(30, 30, 50)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 80, 140))
    }
    local secondaryGradient = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 60)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 150))
    }

    -- Create Container
    local Container = Instance.new("Frame")
    Container.Name = "Container"
    Container.Parent = container
    Container.AnchorPoint = Vector2.new(0.5, 0.5)
    Container.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
    Container.BorderColor3 = Color3.fromRGB(50, 50, 80)
    Container.BorderSizePixel = 1
    Container.ClipsDescendants = true
    Container.Position = UDim2.new(0.5, 0, 0.5, 0)
    Container.Size = UDim2.new(0, 699, 0, 426)

    local ContainerGradient = Instance.new("UIGradient")
    ContainerGradient.Color = primaryGradient
    ContainerGradient.Rotation = 45
    ContainerGradient.Parent = Container

    local ContainerCorner = Instance.new("UICorner")
    ContainerCorner.CornerRadius = UDim.new(0, 12)
    ContainerCorner.Parent = Container

     local acrylic = AcrylicBlur.new(Container)
    acrylic:change_visiblity(true)
    self.acrylic = acrylic

    -- Create Top frame
    local Top = Instance.new("ImageLabel")
    Top.Name = "Top"
    Top.Parent = Container
    Top.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
    Top.BackgroundTransparency = 0.8
    Top.BorderColor3 = Color3.fromRGB(50, 50, 80)
    Top.BorderSizePixel = 1
    Top.Size = UDim2.new(0, 699, 0, 40)
    Top.Image = ""
    Top.ClipsDescendants = true
    Top.ZIndex = 2

    local TopGradient = Instance.new("UIGradient")
    TopGradient.Color = primaryGradient
    TopGradient.Rotation = 45
    TopGradient.Parent = Top

    
    local Logo = Instance.new("ImageLabel")
    Logo.Name = "Logo"
    Logo.Parent = Top
    Logo.AnchorPoint = Vector2.new(0, 0.5)
    Logo.BackgroundTransparency = 1
    Logo.BorderSizePixel = 0
    Logo.Position = UDim2.new(0, 12, 0.5, 0)
    Logo.Size = UDim2.new(0, 28, 0, 28)
    Logo.Image = "rbxassetid://131276823052425"
    Logo.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Logo.ImageTransparency = 0
    Logo.ZIndex = 3

    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Parent = Top
    TextLabel.AnchorPoint = Vector2.new(0, 0.5)
    TextLabel.BackgroundTransparency = 1
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0, 44, 0.5, 0)
    TextLabel.Size = UDim2.new(0, 100, 0, 16)
    TextLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    TextLabel.Text = getgenv().namehub or "VicoX"
    TextLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
    TextLabel.TextSize = 13
    TextLabel.TextScaled = true
    TextLabel.TextWrapped = true
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.ZIndex = 3

    -- Set topbar untuk ThemeDropdown
    local TabManager = { topbar = Top }

if not TabManager.topbar then
    return TabManager
end

local theme_dropdown = Instance.new("Frame")
theme_dropdown.Name = "ThemeDropdown"
theme_dropdown.Parent = Top
theme_dropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
theme_dropdown.BorderColor3 = Color3.fromRGB(50, 50, 80)
theme_dropdown.BorderSizePixel = 1
theme_dropdown.Position = UDim2.new(1, -10, 0, 5)
theme_dropdown.Size = UDim2.new(0, 120, 0, 30)
theme_dropdown.ZIndex = 1000
theme_dropdown.AnchorPoint = Vector2.new(1, 0)
theme_dropdown.ClipsDescendants = false

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = theme_dropdown

local UIGradient = Instance.new("UIGradient")
UIGradient.Color = primaryGradient
UIGradient.Rotation = 45
UIGradient.Parent = theme_dropdown

local Box = Instance.new("Frame")
Box.Name = "Box"
Box.Parent = theme_dropdown
Box.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
Box.BorderSizePixel = 0
Box.Size = UDim2.new(1, -10, 1, -10)
Box.Position = UDim2.new(0.5, 0, 0.5, 0)
Box.AnchorPoint = Vector2.new(0.5, 0.5)
Box.ZIndex = 1001

local BoxCorner = Instance.new("UICorner")
BoxCorner.CornerRadius = UDim.new(0, 6)
BoxCorner.Parent = Box

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Parent = theme_dropdown
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0, 10, 0.5, 0)
Title.Size = UDim2.new(0, 80, 0, 16)
Title.ZIndex = 1002
Title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
Title.Text = Library.flags.theme or "Moon"
Title.TextColor3 = Color3.fromRGB(200, 200, 255)
Title.TextSize = 12
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.AnchorPoint = Vector2.new(0, 0.5)

local Arrow = Instance.new("ImageLabel")
Arrow.Name = "Arrow"
Arrow.Parent = theme_dropdown
Arrow.BackgroundTransparency = 1
Arrow.Position = UDim2.new(1, -20, 0.5, 0)
Arrow.Size = UDim2.new(0, 16, 0, 16)
Arrow.ZIndex = 1002
Arrow.Image = "rbxassetid://6523858394"
Arrow.ImageColor3 = Color3.fromRGB(100, 100, 150)
Arrow.AnchorPoint = Vector2.new(0.5, 0.5)

local Options = Instance.new("Frame")
Options.Name = "Options"
Options.Parent = game:GetService("CoreGui").cac
Options.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
Options.BackgroundTransparency = 1
Options.BorderColor3 = Color3.fromRGB(50, 50, 80)
Options.BorderSizePixel = 1
Options.Position = UDim2.new(0, theme_dropdown.AbsolutePosition.X - 120, 0, theme_dropdown.AbsolutePosition.Y + 35)
Options.Size = UDim2.new(0, 120, 0, 0)
Options.ZIndex = 1000
Options.Visible = false
Options.Active = true

local OptionsCorner = Instance.new("UICorner")
OptionsCorner.CornerRadius = UDim.new(0, 8)
OptionsCorner.Parent = Options

local OptionsGradient = Instance.new("UIGradient")
OptionsGradient.Color = secondaryGradient
OptionsGradient.Rotation = 45
OptionsGradient.Parent = Options

local OptionsList = Instance.new("UIListLayout")
OptionsList.Parent = Options
OptionsList.SortOrder = Enum.SortOrder.LayoutOrder
OptionsList.Padding = UDim.new(0, 5)

local OptionsPadding = Instance.new("UIPadding")
OptionsPadding.Parent = Options
OptionsPadding.PaddingTop = UDim.new(0, 7)
OptionsPadding.PaddingBottom = UDim.new(0, 7)
OptionsPadding.PaddingLeft = UDim.new(0, 5)
OptionsPadding.PaddingRight = UDim.new(0, 5)

local function lerp(a, b, t)
    return a + (b - a) * t
end

local function lerpColor(c1, c2, t)
    return Color3.new(
        lerp(c1.R, c2.R, t),
        lerp(c1.G, c2.G, t),
        lerp(c1.B, c2.B, t)
    )
end

local function tweenGradient(gradient, startColorSeq, endColorSeq, duration)
    local startTime = tick()
    local connection
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        local t = math.min((tick() - startTime) / duration, 1)
        local newColors = {}
        for i, keypoint in ipairs(startColorSeq.Keypoints) do
            local startColor = startColorSeq.Keypoints[i].Value
            local endColor = endColorSeq.Keypoints[i].Value
            newColors[i] = ColorSequenceKeypoint.new(keypoint.Time, lerpColor(startColor, endColor, t))
        end
        gradient.Color = ColorSequence.new(newColors)
        if t >= 1 then
            connection:Disconnect()
        end
    end)
end

local function animateGradient(gradient, speed)
    local connection
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        gradient.Rotation = (gradient.Rotation + speed) % 360
    end)
    return connection
end

local gradientConnections = {}
local themes = {"BloodMoon", "Moon", "FlowerSakura", "SnowDarkWhite", "NeonPulse", "Twilight"}
for i, theme in ipairs(themes) do
    local Option = Instance.new("TextButton")
    Option.Name = theme
    Option.Parent = Options
    Option.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Option.BackgroundTransparency = 1
    Option.BorderColor3 = Color3.fromRGB(50, 50, 80)
    Option.BorderSizePixel = 1
    Option.Size = UDim2.new(1, -10, 0, 30)
    Option.ZIndex = 1001
    Option.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    Option.Text = theme
    Option.TextColor3 = Color3.fromRGB(200, 200, 255)
    Option.TextSize = 12
    Option.TextTransparency = 1
    Option.Visible = true
    Option.LayoutOrder = i

    local OptionCorner = Instance.new("UICorner")
    OptionCorner.CornerRadius = UDim.new(0, 6)
    OptionCorner.Parent = Option

    local OptionGradient = Instance.new("UIGradient")
    OptionGradient.Color = secondaryGradient
    OptionGradient.Rotation = 45
    OptionGradient.Parent = Option

    Option.MouseButton1Click:Connect(function()
        Library.flags.theme = theme
        Library:save_flags()
        Title.Text = theme
        Options.Visible = false
        TweenService:Create(Options, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { Size = UDim2.new(0, 120, 0, 0), BackgroundTransparency = 1 }):Play()
        TweenService:Create(Arrow, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { Rotation = 0 }):Play()
        for _, option in ipairs(Options:GetChildren()) do
            if option:IsA("TextButton") then
                TweenService:Create(option, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { BackgroundTransparency = 1, TextTransparency = 1 }):Play()
            end
        end
        local theme_colors = {
            BloodMoon = { primary = ColorSequence.new(Color3.fromRGB(150, 20, 20), Color3.fromRGB(220, 50, 50)), secondary = ColorSequence.new(Color3.fromRGB(100, 10, 10), Color3.fromRGB(180, 30, 30)), text = Color3.fromRGB(255, 200, 200), speed = 0.5 },
            Moon = { primary = primaryGradient, secondary = secondaryGradient, text = Color3.fromRGB(200, 200, 255), speed = 0.3 },
            FlowerSakura = { primary = ColorSequence.new(Color3.fromRGB(255, 182, 193), Color3.fromRGB(255, 105, 180)), secondary = ColorSequence.new(Color3.fromRGB(255, 228, 225), Color3.fromRGB(255, 160, 180)), text = Color3.fromRGB(255, 255, 255), speed = 0.4 },
            SnowDarkWhite = { primary = ColorSequence.new(Color3.fromRGB(220, 220, 230), Color3.fromRGB(255, 255, 255)), secondary = ColorSequence.new(Color3.fromRGB(200, 200, 220), Color3.fromRGB(240, 240, 255)), text = Color3.fromRGB(255, 255, 255), speed = 1 },
            NeonPulse = { primary = ColorSequence.new(Color3.fromRGB(0, 255, 255), Color3.fromRGB(255, 0, 255)), secondary = ColorSequence.new(Color3.fromRGB(0, 200, 200), Color3.fromRGB(200, 0, 200)), text = Color3.fromRGB(255, 255, 255), speed = 2 },
            Twilight = { primary = ColorSequence.new(Color3.fromRGB(80, 60, 120), Color3.fromRGB(120, 100, 180)), secondary = ColorSequence.new(Color3.fromRGB(60, 40, 100), Color3.fromRGB(100, 80, 160)), text = Color3.fromRGB(220, 220, 255), speed = 0.2 }
        }
        local colors = theme_colors[theme]
        tweenGradient(ContainerGradient, ContainerGradient.Color, colors.primary, 0.5)
        tweenGradient(TopGradient, TopGradient.Color, colors.primary, 0.5)
        for _, conn in pairs(gradientConnections) do
            conn:Disconnect()
        end
        gradientConnections = {}
        gradientConnections[ContainerGradient] = animateGradient(ContainerGradient, colors.speed)
        gradientConnections[TopGradient] = animateGradient(TopGradient, colors.speed)
        for _, obj in ipairs(Container:GetDescendants()) do
            if obj:IsA("Frame") or obj:IsA("ImageLabel") or obj:IsA("TextButton") then
                if obj:FindFirstChild("UIGradient") then
                    tweenGradient(obj.UIGradient, obj.UIGradient.Color, obj.Name == "Box" and colors.secondary or colors.primary, 0.5)
                    gradientConnections[obj.UIGradient] = animateGradient(obj.UIGradient, colors.speed)
                elseif obj:IsA("TextButton") then
                    TweenService:Create(obj, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { BackgroundColor3 = colors.secondary.Keypoints[1].Value, TextColor3 = colors.text }):Play()
                end
            elseif obj:IsA("TextLabel") then
                TweenService:Create(obj, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { TextColor3 = colors.text }):Play()
            end
        end
        if TabManager.tabs and type(TabManager.tabs) == "table" then
            for _, tab in ipairs(TabManager.tabs) do
                if tab.tab and tab.tab:FindFirstChild("UIGradient") then
                    tweenGradient(tab.tab.UIGradient, tab.tab.UIGradient.Color, colors.primary, 0.5)
                    gradientConnections[tab.tab.UIGradient] = animateGradient(tab.tab.UIGradient, colors.speed)
                elseif tab.tab then
                    TweenService:Create(tab.tab, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { BackgroundColor3 = colors.primary.Keypoints[1].Value, TextColor3 = colors.text }):Play()
                end
            end
        end
        TweenService:Create(Title, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { TextColor3 = colors.text }):Play()
        for _, option in ipairs(Options:GetChildren()) do
            if option:IsA("TextButton") then
                TweenService:Create(option, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { TextColor3 = colors.text }):Play()
            end
        end
    end)
end

theme_dropdown.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        Options.Visible = not Options.Visible
        local size = Options.Visible and UDim2.new(0, 120, 0, 210) or UDim2.new(0, 120, 0, 0)
        local transparency = Options.Visible and 0 or 1
        TweenService:Create(Options, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { Size = size, BackgroundTransparency = transparency }):Play()
        TweenService:Create(Arrow, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { Rotation = Options.Visible and 180 or 0 }):Play()
        if Options.Visible then
            Options.ZIndex = 1000
            for _, option in ipairs(Options:GetChildren()) do
                if option:IsA("TextButton") then
                    option.Visible = true
                    option.ZIndex = 1001
                    TweenService:Create(option, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), { BackgroundTransparency = 0, TextTransparency = 0 }):Play()
                end
            end
        end
    end
end)

local dragging, dragInput, dragStart, startPos
Options.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = Options.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

Options.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        Options.Position = newPos
    end
end)

    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Parent = container
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.BorderSizePixel = 0
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(0, 776, 0, 509)
    Shadow.ZIndex = 0
    Shadow.Image = "rbxassetid://17290899982"
    Shadow.ImageColor3 = Color3.fromRGB(255, 255, 255)
    Shadow.ImageTransparency = 0.5

    local ShadowGradient = Instance.new("UIGradient")
    ShadowGradient.Color = primaryGradient
    ShadowGradient.Rotation = 45
    ShadowGradient.Parent = Shadow

    local InfoBase = Instance.new("Frame")
    InfoBase.Name = "InfoBase"
    InfoBase.Parent = Container
    InfoBase.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
    InfoBase.BorderSizePixel = 1
    InfoBase.BorderColor3 = Color3.fromRGB(50, 50, 80)
    InfoBase.Position = UDim2.new(0.5, 0, 1, -15)
    InfoBase.Size = UDim2.new(0, 200, 0, 50)
    InfoBase.AnchorPoint = Vector2.new(0.5, 1)
    InfoBase.ClipsDescendants = true

    local InfoBaseCorner = Instance.new("UICorner")
    InfoBaseCorner.CornerRadius = UDim.new(0, 10)
    InfoBaseCorner.Parent = InfoBase

    local InfoBaseGradient = Instance.new("UIGradient")
    InfoBaseGradient.Color = secondaryGradient
    InfoBaseGradient.Rotation = 45
    InfoBaseGradient.Parent = InfoBase

    local InfoGlow = Instance.new("ImageLabel")
    InfoGlow.Name = "InfoGlow"
    InfoGlow.Parent = InfoBase
    InfoGlow.BackgroundTransparency = 1
    InfoGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
    InfoGlow.Size = UDim2.new(1, 10, 1, 10)
    InfoGlow.Image = "rbxassetid://17290723539"
    InfoGlow.ImageTransparency = 0.6
    InfoGlow.ImageColor3 = Color3.fromRGB(100, 100, 150)
    InfoGlow.AnchorPoint = Vector2.new(0.5, 0.5)

    local InfoInner = Instance.new("Frame")
    InfoInner.Name = "InfoInner"
    InfoInner.Parent = InfoBase
    InfoInner.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    InfoInner.BorderSizePixel = 0
    InfoInner.Size = UDim2.new(1, -10, 1, -10)
    InfoInner.Position = UDim2.new(0.5, 0, 0.5, 0)
    InfoInner.AnchorPoint = Vector2.new(0.5, 0.5)
    InfoInner.ClipsDescendants = true

    local InfoInnerCorner = Instance.new("UICorner")
    InfoInnerCorner.CornerRadius = UDim.new(0, 8)
    InfoInnerCorner.Parent = InfoInner

    local InfoInnerGradient = Instance.new("UIGradient")
    InfoInnerGradient.Color = primaryGradient
    InfoInnerGradient.Rotation = 45
    InfoInnerGradient.Parent = InfoInner

    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingLeft = UDim.new(0, 6)
    UIPadding.PaddingRight = UDim.new(0, 6)
    UIPadding.PaddingTop = UDim.new(0, 6)
    UIPadding.PaddingBottom = UDim.new(0, 6)
    UIPadding.Parent = InfoInner

    local Avatar = Instance.new("ImageLabel")
    Avatar.Name = "Avatar"
    Avatar.Parent = InfoInner
    Avatar.BackgroundTransparency = 1
    Avatar.Position = UDim2.new(0, 0, 0.5, 0)
    Avatar.Size = UDim2.new(0, 36, 0, 36)
    Avatar.AnchorPoint = Vector2.new(0, 0.5)
    local thumbType = Enum.ThumbnailType.AvatarThumbnail
    local thumbSize = Enum.ThumbnailSize.Size150x150
    local success, content = pcall(function()
        return Players:GetUserThumbnailAsync(Player.UserId, thumbType, thumbSize)
    end)
    if success then
        Avatar.Image = content
    else
        Avatar.Image = "rbxassetid://17290697757"
    end

    local AvatarCorner = Instance.new("UICorner")
    AvatarCorner.CornerRadius = UDim.new(0, 8)
    AvatarCorner.Parent = Avatar

    local HeartIcon = Instance.new("ImageLabel")
    HeartIcon.Name = "HeartIcon"
    HeartIcon.Parent = InfoInner
    HeartIcon.BackgroundTransparency = 1
    HeartIcon.Position = UDim2.new(0, 40, 0.5, 0)
    HeartIcon.Size = UDim2.new(0, 14, 0, 14)
    HeartIcon.AnchorPoint = Vector2.new(0, 0.5)
    HeartIcon.Image = "rbxassetid://10653372143"
    HeartIcon.ImageColor3 = Color3.fromRGB(100, 100, 150)
    HeartIcon.ImageTransparency = 0.3

    local PlayerInfo = Instance.new("TextLabel")
    PlayerInfo.Name = "PlayerInfo"
    PlayerInfo.Parent = InfoInner
    PlayerInfo.BackgroundTransparency = 1
    PlayerInfo.Position = UDim2.new(0, 60, 0.5, 0)
    PlayerInfo.Size = UDim2.new(0, 120, 0, 14)
    PlayerInfo.AnchorPoint = Vector2.new(0, 0.5)
    PlayerInfo.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    PlayerInfo.TextColor3 = Color3.fromRGB(200, 200, 255)
    PlayerInfo.TextSize = 12
    PlayerInfo.TextScaled = true
    PlayerInfo.TextWrapped = true
    PlayerInfo.TextXAlignment = Enum.TextXAlignment.Left
    PlayerInfo.Text = "Loading..."

    local function updatePlayerInfo()
        if not Humanoid or not Humanoid.Parent then
            PlayerInfo.Text = "Loading..."
            PlayerInfo.TextColor3 = Color3.fromRGB(200, 200, 255)
            HeartIcon.ImageColor3 = Color3.fromRGB(100, 100, 150)
            return
        end
        local health = math.floor(Humanoid.Health)
        PlayerInfo.Text = string.format("%s | %d", Player.Name, health)
        local healthPercentage = health / Humanoid.MaxHealth
        if healthPercentage > 0.6 then
            PlayerInfo.TextColor3 = Color3.fromRGB(100, 255, 100)
            HeartIcon.ImageColor3 = Color3.fromRGB(100, 255, 100)
        elseif healthPercentage > 0.2 then
            PlayerInfo.TextColor3 = Color3.fromRGB(255, 255, 100)
            HeartIcon.ImageColor3 = Color3.fromRGB(255, 255, 100)
        else
            PlayerInfo.TextColor3 = Color3.fromRGB(255, 100, 100)
            HeartIcon.ImageColor3 = Color3.fromRGB(255, 100, 100)
        end
    end

    Player.CharacterAdded:Connect(function(char)
        Humanoid = char:WaitForChild("Humanoid")
        updatePlayerInfo()
    end)
    Humanoid.HealthChanged:Connect(updatePlayerInfo)
    updatePlayerInfo()

    local Line = Instance.new("Frame")
    Line.Name = "Line"
    Line.Parent = Container
    Line.BackgroundColor3 = Color3.fromRGB(50, 50, 80)
    Line.BorderSizePixel = 0
    Line.Position = UDim2.new(0.3, 0, 0.1, 0)
    Line.Size = UDim2.new(0, 2, 0, 380)

    local tabs = Instance.new("ScrollingFrame")
    tabs.Name = "Tabs"
    tabs.Active = true
    tabs.BackgroundColor3 = Color3.fromRGB(25, 25, 40)
    tabs.BackgroundTransparency = 0.9
    tabs.BorderColor3 = Color3.fromRGB(50, 50, 80)
    tabs.BorderSizePixel = 1
    tabs.Position = UDim2.new(0, 10, 0.1, 0)
    tabs.Size = UDim2.new(0, 200, 0, 380)
    tabs.ScrollBarImageColor3 = Color3.fromRGB(50, 50, 80)
    tabs.ScrollBarThickness = 2
    tabs.Parent = Container

    local TabsGradient = Instance.new("UIGradient")
    TabsGradient.Color = primaryGradient
    TabsGradient.Rotation = 45
    TabsGradient.Parent = tabs

    local tabslist = Instance.new("UIListLayout")
    tabslist.Parent = tabs
    tabslist.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabslist.SortOrder = Enum.SortOrder.LayoutOrder
    tabslist.Padding = UDim.new(0, 12)

    local UIPadding_2 = Instance.new("UIPadding")
    UIPadding_2.Parent = tabs
    UIPadding_2.PaddingTop = UDim.new(0, 15)

    local tabsCorner = Instance.new("UICorner")
    tabsCorner.CornerRadius = UDim.new(0, 8)
    tabsCorner.Parent = tabs

    local acrylicTabs = AcrylicBlur.new(tabs)
    acrylicTabs:change_visiblity(true)


     local isOpen = true
    local buttonSize = UDim2.new(0, 140, 0, 50)
    local descHeight = 0
    local descText = "Toggle UI visibility"
    -- Calculate description height
    local TextService = game:GetService("TextService")
    local textBoundsParams = Instance.new("GetTextBoundsParams")
    textBoundsParams.Text = descText
    textBoundsParams.Font = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
    textBoundsParams.Size = 11
    textBoundsParams.Width = 190
    local textBounds = TextService:GetTextBoundsAsync(textBoundsParams)
    descHeight = math.ceil(textBounds.Y) + 4
    buttonSize = UDim2.new(0, 140, 0, 50 + descHeight)

    -- Create mobile button
    local mobile_button = Instance.new("TextButton")
    mobile_button.Name = "Mobile"
    mobile_button.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    mobile_button.BorderColor3 = Color3.fromRGB(50, 50, 80)
    mobile_button.BorderSizePixel = 1
    mobile_button.Position = UDim2.new(0.02, 0, 0.9, 0)
    mobile_button.Size = buttonSize
    mobile_button.AutoButtonColor = false
    mobile_button.Modal = true
    mobile_button.Font = Enum.Font.SourceSans
    mobile_button.Text = ""
    mobile_button.TextColor3 = Color3.fromRGB(0, 0, 0)
    mobile_button.TextSize = 14
    mobile_button.ZIndex = 10
    mobile_button.ClipsDescendants = false
    mobile_button.Parent = container

    -- Add corner
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 12)
    UICorner.Parent = mobile_button

    -- Add gradient
    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = primaryGradient
    UIGradient.Rotation = 45
    UIGradient.Parent = mobile_button

    -- Add glow
    local Glow = Instance.new("ImageLabel")
    Glow.Name = "Glow"
    Glow.Size = UDim2.new(1, 10, 1, 10)
    Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Glow.AnchorPoint = Vector2.new(0.5, 0.5)
    Glow.BackgroundTransparency = 1
    Glow.BorderSizePixel = 0
    Glow.Image = "rbxassetid://17290798394"
    Glow.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Glow.ImageTransparency = 0.6
    Glow.ZIndex = 9
    Glow.Parent = mobile_button

    -- Add shadow
    local MShadow = Instance.new("ImageLabel")
    MShadow.Name = "Shadow"
    MShadow.Size = UDim2.new(1, 20, 1, 20)
    MShadow.Position = UDim2.new(0.5, 0, 0.5, 2)
    MShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    MShadow.BackgroundTransparency = 1
    MShadow.BorderSizePixel = 0
    MShadow.Image = "rbxassetid://17183270335"
    MShadow.ImageTransparency = 0.4
    MShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    MShadow.ZIndex = 8
    MShadow.Parent = mobile_button

    -- Add icon
    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.Size = UDim2.new(0, 24, 0, 24)
    Icon.Position = UDim2.new(0.25, 0, 0.5, descHeight > 0 and -descHeight / 2 or 0)
    Icon.AnchorPoint = Vector2.new(0.5, 0.5)
    Icon.BackgroundTransparency = 1
    Icon.BorderSizePixel = 0
    Icon.Image = isOpen and "rbxassetid://6523858394" or "rbxassetid://17400678941"
    Icon.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Icon.ZIndex = 11
    Icon.Parent = mobile_button

    
    local State = Instance.new("TextLabel")
    State.Name = "State"
    State.Size = UDim2.new(0, 70, 0, 16)
    State.Position = UDim2.new(0.65, 0, 0.5, descHeight > 0 and -descHeight / 2 or 0)
    State.AnchorPoint = Vector2.new(0.5, 0.5)
    State.BackgroundTransparency = 1
    State.BorderSizePixel = 0
    State.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    State.Text = isOpen and "Open" or "Close"
    State.TextColor3 = Color3.fromRGB(200, 200, 255)
    State.TextSize = 13
    State.TextScaled = true
    State.TextWrapped = true
    State.TextXAlignment = Enum.TextXAlignment.Left
    State.ZIndex = 11
    State.Parent = mobile_button

   
    local Description = Instance.new("TextLabel")
    Description.Name = "Description"
    Description.Size = UDim2.new(0, 190, 0, descHeight)
    Description.Position = UDim2.new(0.5, 0, 1, -descHeight / 2 - 2)
    Description.AnchorPoint = Vector2.new(0.5, 0.5)
    Description.BackgroundTransparency = 1
    Description.BorderSizePixel = 0
    Description.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
    Description.TextColor3 = Color3.fromRGB(150, 150, 200)
    Description.TextSize = 11
    Description.TextXAlignment = Enum.TextXAlignment.Left
    Description.TextYAlignment = Enum.TextYAlignment.Top
    Description.Text = descText
    Description.TextWrapped = true
    Description.TextTransparency = 1
    Description.ZIndex = 12
    Description.Parent = mobile_button

    local function adjustDescriptionPosition()
        local buttonAbsSize = mobile_button.AbsoluteSize
        local descAbsSize = Description.AbsoluteSize
        local descAbsPos = Description.AbsolutePosition
        local buttonAbsPos = mobile_button.AbsolutePosition
        local maxY = buttonAbsPos.Y + buttonAbsSize.Y - descAbsSize.Y
        if descAbsPos.Y + descAbsSize.Y > maxY then
            Description.Position = UDim2.new(0.5, 0, 1, -descAbsSize.Y / 2 - 2)
        end
    end
    adjustDescriptionPosition()

    -- Hover animations
    mobile_button.MouseEnter:Connect(function()
        TweenService:Create(mobile_button, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = UDim2.new(0, 145, 0, 55 + descHeight),
            BackgroundColor3 = Color3.fromRGB(40, 40, 60)
        }):Play()
        TweenService:Create(Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageTransparency = 0.4
        }):Play()
        TweenService:Create(Icon, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageColor3 = Color3.fromRGB(150, 150, 200),
            Rotation = 10
        }):Play()
        TweenService:Create(State, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
        TweenService:Create(Description, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
    end)

    mobile_button.MouseLeave:Connect(function()
        TweenService:Create(mobile_button, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = buttonSize,
            BackgroundColor3 = Color3.fromRGB(30, 30, 50)
        }):Play()
        TweenService:Create(Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageTransparency = 0.6
        }):Play()
        TweenService:Create(Icon, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageColor3 = Color3.fromRGB(100, 100, 150),
            Rotation = 0
        }):Play()
        TweenService:Create(State, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
        TweenService:Create(Description, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 1
        }):Play()
    end)

    
-- Click animation and open/close logic
mobile_button.MouseButton1Click:Connect(function()
    isOpen = not isOpen
    self:visible()
    -- Fade out current text
    local fadeOut = TweenService:Create(State, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {
        TextTransparency = 1
    })
    fadeOut:Play()
    fadeOut.Completed:Connect(function()
        -- Set new text and fade in
        State.Text = isOpen and "Open" or "Close"
        TweenService:Create(State, TweenInfo.new(0.15, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
    end)
    -- Set Icon.Image directly
    Icon.Image = isOpen and "rbxassetid://6523858394" or "rbxassetid://17400678941"
    TweenService:Create(Icon, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
        Rotation = isOpen and 0 or 180
    }):Play()
    TweenService:Create(Glow, TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 1, true), {
        ImageTransparency = 0.3
    }):Play()
end)

    container.Container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            self.dragging = true
            self.drag_position = input.Position
            self.start_position = container.Container.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    self.dragging = false
                    self.drag_position = nil
                    self.start_position = nil
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            self.input = input
            self:drag()
        end
    end)

    UserInputService.InputBegan:Connect(function(input, process)
        if process then return end
        if not self:exist() then return end
        if input.KeyCode == Enum.KeyCode.Insert then
            self:visible()
        end
    end)

    


    function TabManager:update_sections()
        self.left.Visible = true
        self.right.Visible = true
        for _, object in container.Container:GetChildren() do
            if not object.Name:find("Section") then continue end
            if object == self.left or object == self.right then continue end
            object.Visible = false
        end
    end

    function TabManager:open_tab()
        self:update_sections()
        TweenService:Create(self.tab.Fill, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            BackgroundTransparency = 0
        }):Play()
        TweenService:Create(self.tab.Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageTransparency = 0.6
        }):Play()
        TweenService:Create(self.tab.TextLabel, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
        TweenService:Create(self.tab.Logo, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageTransparency = 0
        }):Play()
        for _, object in tabs:GetChildren() do
            if object.Name ~= 'Tab' or object == self.tab then continue end
            TweenService:Create(object.Fill, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                BackgroundTransparency = 0.9
            }):Play()
            TweenService:Create(object.Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                ImageTransparency = 0.9
            }):Play()
            TweenService:Create(object.TextLabel, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                TextTransparency = 0.5
            }):Play()
            TweenService:Create(object.Logo, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                ImageTransparency = 0.5
            }):Play()
        end
    end

function TabManager:create_tab(name)
    local tab = Instance.new("TextButton")
    tab.Name = "Tab"
    tab.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    tab.BorderColor3 = Color3.fromRGB(50, 50, 80)
    tab.BorderSizePixel = 1
    tab.Size = UDim2.new(0, 180, 0, 44) -- Sedikit lebih tinggi untuk estetika
    tab.ZIndex = 2
    tab.AutoButtonColor = false
    tab.Font = Enum.Font.SourceSans
    tab.Text = ""
    tab.TextColor3 = Color3.fromRGB(0, 0, 0)
    tab.TextSize = 14
    tab.Parent = tabs

    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 10)
    tabCorner.Parent = tab

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Parent = tab
    TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
    TextLabel.BackgroundTransparency = 1
    TextLabel.BorderSizePixel = 0
    TextLabel.Position = UDim2.new(0.6, 0, 0.5, 0)
    TextLabel.Size = UDim2.new(0, 130, 0, 18)
    TextLabel.ZIndex = 3
    TextLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    TextLabel.Text = name
    TextLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
    TextLabel.TextTransparency = 0.3
    TextLabel.TextSize = 15 -- Teks lebih besar
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left

    local Logo = Instance.new("ImageLabel")
    Logo.Name = "Logo"
    Logo.Parent = tab
    Logo.AnchorPoint = Vector2.new(0.5, 0.5)
    Logo.BackgroundTransparency = 1
    Logo.BorderSizePixel = 0
    Logo.Position = UDim2.new(0.13, 0, 0.5, 0)
    Logo.Size = UDim2.new(0, 24, 0, 24) -- Ikon lebih besar
    Logo.ZIndex = 3
    Logo.Image = "rbxassetid://17290697757"
    Logo.ImageTransparency = 0.3
    Logo.ImageColor3 = Color3.fromRGB(100, 100, 150)

    local Glow = Instance.new("ImageLabel")
    Glow.Name = "Glow"
    Glow.Parent = tab
    Glow.AnchorPoint = Vector2.new(0.5, 0.5)
    Glow.BackgroundTransparency = 1
    Glow.BorderSizePixel = 0
    Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Glow.Size = UDim2.new(0, 190, 0, 54)
    Glow.Image = "rbxassetid://17290723539"
    Glow.ImageTransparency = 0.9
    Glow.ImageColor3 = Color3.fromRGB(100, 100, 150)

    local Shadow = Instance.new("ImageLabel") -- Tambah bayangan untuk efek 3D
    Shadow.Name = "Shadow"
    Shadow.Parent = tab
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.BorderSizePixel = 0
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 2) -- Sedikit offset ke bawah
    Shadow.Size = UDim2.new(0, 190, 0, 54)
    Shadow.Image = "rbxassetid://17290723539"
    Shadow.ImageTransparency = 0.7
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ZIndex = 1

    local Fill = Instance.new("Frame")
    Fill.Name = "Fill"
    Fill.Parent = tab
    Fill.AnchorPoint = Vector2.new(0.5, 0.5)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.BackgroundTransparency = 0.9
    Fill.BorderSizePixel = 0
    Fill.Position = UDim2.new(0.5, 0, 0.5, 0)
    Fill.Size = UDim2.new(0, 180, 0, 44)
    Fill.ZIndex = 2

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.CornerRadius = UDim.new(0, 10)
    UICorner_2.Parent = Fill

    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = ColorSequence.new{ -- Gradien lebih kontras
        ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 120, 180))
    }
    UIGradient.Rotation = 45
    UIGradient.Parent = Fill

    -- Animasi hover
    tab.MouseEnter:Connect(function()
        TweenService:Create(Glow, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
            ImageTransparency = 0.7
        }):Play()
        TweenService:Create(Fill, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
            BackgroundTransparency = 0.8
        }):Play()
    end)

    tab.MouseLeave:Connect(function()
        if tab ~= self.tab then
            TweenService:Create(Glow, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
                ImageTransparency = 0.9
            }):Play()
            TweenService:Create(Fill, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
                BackgroundTransparency = 0.9
            }):Play()
        end
    end)

    local left = Instance.new("ScrollingFrame")
    left.Name = "LeftSection"
    left.Active = true
    left.BackgroundTransparency = 1
    left.BorderSizePixel = 0
    left.Position = UDim2.new(0.33, 0, 0.13, 0)
    left.Size = UDim2.new(0, 220, 0, 360)
    left.AutomaticCanvasSize = Enum.AutomaticSize.XY
    left.ScrollBarImageColor3 = Color3.fromRGB(50, 50, 80)
    left.ScrollBarThickness = 2

    local leftlist = Instance.new("UIListLayout")
    leftlist.Parent = left
    leftlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
    leftlist.SortOrder = Enum.SortOrder.LayoutOrder
    leftlist.Padding = UDim.new(0, 10)

    local right = Instance.new("ScrollingFrame")
    right.Name = "RightSection"
    right.Active = true
    right.BackgroundTransparency = 1
    right.BorderSizePixel = 0
    right.Position = UDim2.new(0.66, 0, 0.13, 0)
    right.Size = UDim2.new(0, 220, 0, 360)
    right.AutomaticCanvasSize = Enum.AutomaticSize.XY
    right.ScrollBarImageColor3 = Color3.fromRGB(50, 50, 80)
    right.ScrollBarThickness = 2

    local rightlist = Instance.new("UIListLayout")
    rightlist.Parent = right
    rightlist.HorizontalAlignment = Enum.HorizontalAlignment.Center
    rightlist.SortOrder = Enum.SortOrder.LayoutOrder
    rightlist.Padding = UDim.new(0, 10)

    self.tab = tab
    self.left = left
    self.right = right

    if container.Container:FindFirstChild('RightSection') then
        left.Visible = false
        right.Visible = false
    else
        TabManager:open_tab()
    end

    left.Parent = container.Container
    right.Parent = container.Container

    tab.MouseButton1Click:Connect(function()
        TabManager:open_tab()
    end)

    local Module = {
        left = left,
        right = right,
        _layout_order = 0
    }

    function Module:create_module(settings)
        local section = settings.section == "right" and self.right or self.left
        local title = Instance.new("TextLabel")
        title.Name = "Title"
        title.Size = UDim2.new(0, 200, 0, 16)
        title.BackgroundTransparency = 1
        title.BorderSizePixel = 0
        title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
        title.TextColor3 = Color3.fromRGB(200, 200, 255)
        title.TextSize = 13
        title.TextXAlignment = Enum.TextXAlignment.Left
        title.Text = settings.title or "Title"
        title.Parent = section
        title.LayoutOrder = self._layout_order
        self._layout_order = self._layout_order + 1
    end

       
        function Module:enable_toggle(toggle)
            TweenService:Create(toggle.Checkbox.Fill, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                Position = UDim2.new(1, -2, 0.5, 0),
                BackgroundColor3 = Color3.fromRGB(100, 100, 150)
            }):Play()
            TweenService:Create(toggle.Checkbox.Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                ImageTransparency = 0.6
            }):Play()
        end

        function Module:disable_toggle(toggle)
            TweenService:Create(toggle.Checkbox.Fill, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                Position = UDim2.new(0, 2, 0.5, 0),
                BackgroundColor3 = Color3.fromRGB(80, 80, 100)
            }):Play()
            TweenService:Create(toggle.Checkbox.Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                ImageTransparency = 0.9
            }):Play()
        end

function Module:create_toggle(settings)
    local section = settings.section == "right" and self.right or self.left
    local ToggleManager = {
        _state = settings.enabled or false
    }
    local toggle = Instance.new("TextButton")
    toggle.Name = "Toggle"
    toggle.Size = UDim2.new(0, 220, 0, settings.desc and 60 or 40) -- Tambah tinggi jika ada desc
    toggle.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    toggle.BorderColor3 = Color3.fromRGB(50, 50, 80)
    toggle.BorderSizePixel = 1
    toggle.AutoButtonColor = false
    toggle.Font = Enum.Font.SourceSans
    toggle.Text = ""
    toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
    toggle.TextSize = 14
    toggle.Parent = section
    toggle.LayoutOrder = self._layout_order
    self._layout_order = self._layout_order + 1

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = toggle

    local Checkbox = Instance.new("Frame")
    Checkbox.Name = "Checkbox"
    Checkbox.Size = UDim2.new(0, 44, 0, 22)
    Checkbox.Position = UDim2.new(0.9, 0, settings.desc and 0.3 or 0.5, 0) -- Geser ke atas jika ada desc
    Checkbox.AnchorPoint = Vector2.new(0.5, 0.5)
    Checkbox.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Checkbox.BorderSizePixel = 0
    Checkbox.Parent = toggle

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.CornerRadius = UDim.new(0, 11)
    UICorner_2.Parent = Checkbox

    local Glow = Instance.new("ImageLabel")
    Glow.Name = "Glow"
    Glow.Size = UDim2.new(0, 54, 0, 32)
    Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Glow.AnchorPoint = Vector2.new(0.5, 0.5)
    Glow.BackgroundTransparency = 1
    Glow.BorderSizePixel = 0
    Glow.Image = "rbxassetid://17290798394"
    Glow.ImageTransparency = ToggleManager._state and 0.4 or 0.6
    Glow.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Glow.Parent = Checkbox

    local Fill = Instance.new("ImageLabel")
    Fill.Name = "Fill"
    Fill.Size = UDim2.new(0, 20, 0, 20)
    Fill.Position = ToggleManager._state and UDim2.new(1, -4, 0.5, 0) or UDim2.new(0, 4, 0.5, 0)
    Fill.AnchorPoint = Vector2.new(0.5, 0.5)
    Fill.BackgroundTransparency = 1
    Fill.Image = "rbxassetid://7059346373"
    Fill.ImageColor3 = ToggleManager._state and Color3.fromRGB(100, 100, 150) or Color3.fromRGB(80, 80, 100)
    Fill.ImageTransparency = ToggleManager._state and 0 or 0.2
    Fill.Parent = Checkbox

    local FillGradient = Instance.new("UIGradient")
    FillGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(200, 200, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 150))
    }
    FillGradient.Rotation = 45
    FillGradient.Parent = Fill

    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Size = UDim2.new(0, 26, 0, 26)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 2)
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://17290798394"
    Shadow.ImageTransparency = 0.6
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ZIndex = -1
    Shadow.Parent = Fill

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(0, 160, 0, 16)
    Title.Position = UDim2.new(0.4, 0, settings.desc and 0.3 or 0.5, 0) -- Geser ke atas jika ada desc
    Title.AnchorPoint = Vector2.new(0.5, 0.5)
    Title.BackgroundTransparency = 1
    Title.BorderSizePixel = 0
    Title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    Title.TextColor3 = Color3.fromRGB(200, 200, 255)
    Title.TextSize = 13
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Text = settings.name or "Toggle"
    Title.Parent = toggle

    
    if settings.desc then
        local Description = Instance.new("TextLabel")
        Description.Name = "Description"
        Description.Size = UDim2.new(0, 190, 0, 0) -- Height will be set dynamically
        Description.Position = UDim2.new(0.5, 0, 0.85, 0) -- Position below slider bar
        Description.AnchorPoint = Vector2.new(0.5, 0.5)
        Description.BackgroundTransparency = 1
        Description.BorderSizePixel = 0
        Description.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
        Description.TextColor3 = Color3.fromRGB(150, 150, 200)
        Description.TextSize = 11
        Description.TextXAlignment = Enum.TextXAlignment.Left
        Description.TextYAlignment = Enum.TextYAlignment.Top
        Description.Text = settings.desc
        Description.TextWrapped = true -- Enable text wrapping
        Description.TextTransparency = 1
        Description.Parent = toggle

        -- Calculate text height dynamically
        local textBoundsParams = Instance.new("GetTextBoundsParams")
        textBoundsParams.Text = settings.desc
        textBoundsParams.Font = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
        textBoundsParams.Size = 11
        textBoundsParams.Width = 190 -- Match the width of the Description
        local textBounds = TextService:GetTextBoundsAsync(textBoundsParams)
        Description.Size = UDim2.new(0, 190, 0, math.ceil(textBounds.Y)) -- Set height based on text bounds

        toggle.MouseEnter:Connect(function()
            TweenService:Create(Description, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
                TextTransparency = 0
            }):Play()
        end)

        toggle.MouseLeave:Connect(function()
            TweenService:Create(Description, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {
                TextTransparency = 0.4
            }):Play()
        end)
    end

    if not Library.flags[settings.flag] then
        Library.flags[settings.flag] = ToggleManager._state
    end

    if Library.flags[settings.flag] ~= nil then
        ToggleManager._state = Library.flags[settings.flag]
        if ToggleManager._state then
            Module:enable_toggle(toggle)
        else
            Module:disable_toggle(toggle)
        end
    end

    function Module:enable_toggle(toggle)
        local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        TweenService:Create(toggle.Checkbox.Fill, tweenInfo, {
            Position = UDim2.new(1, -4, 0.5, 0),
            ImageColor3 = Color3.fromRGB(100, 100, 150),
            ImageTransparency = 0,
            Size = UDim2.new(0, 20, 0, 20)
        }):Play()
        TweenService:Create(toggle.Checkbox.Glow, tweenInfo, {
            ImageTransparency = 0.4
        }):Play()
        TweenService:Create(toggle.Checkbox.Glow, TweenInfo.new(0.6, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true), {
            ImageTransparency = 0.3
        }):Play()
        TweenService:Create(toggle.Checkbox.Fill, TweenInfo.new(0.2, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, 24, 0, 24)
        }):Play()
        TweenService:Create(toggle.Checkbox.Fill, tweenInfo, {
            Rotation = 360
        }):Play()
    end

    function Module:disable_toggle(toggle)
        local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        TweenService:Create(toggle.Checkbox.Fill, tweenInfo, {
            Position = UDim2.new(0, 4, 0.5, 0),
            ImageColor3 = Color3.fromRGB(80, 80, 100),
            ImageTransparency = 0.2,
            Size = UDim2.new(0, 20, 0, 20),
            Rotation = 0
        }):Play()
        TweenService:Create(toggle.Checkbox.Glow, tweenInfo, {
            ImageTransparency = 0.6
        }):Play()
        TweenService:Create(toggle.Checkbox.Fill, TweenInfo.new(0.2, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, 16, 0, 16)
        }):Play()
    end

    function ToggleManager:change_state(state)
        self._state = state
        Library.flags[settings.flag] = state
        Library:save_flags()
        if state then
            Module:enable_toggle(toggle)
        else
            Module:disable_toggle(toggle)
        end
        if settings.callback then
            settings.callback(state)
        end
    end

    toggle.MouseButton1Click:Connect(function()
        ToggleManager:change_state(not ToggleManager._state)
    end)

    return ToggleManager
end

        function Module:slider_loop(settings)
            Library.slider_drag = true
            while Library.slider_drag do
                local mouseX = Mouse.X
                local boxPosX = settings.slider.Box.AbsolutePosition.X
                local boxSizeX = settings.slider.Box.AbsoluteSize.X
                local result = math.clamp((mouseX - boxPosX) / boxSizeX, 0, 1)
                local number = math.floor(((settings.max - settings.min) * result) + settings.min)
                local slider_size = math.clamp(result, 0.001, 0.999)
                settings.slider.Box.Fill.UIGradient.Transparency = NumberSequence.new({
                    NumberSequenceKeypoint.new(0, 0),
                    NumberSequenceKeypoint.new(slider_size, 0),
                    NumberSequenceKeypoint.new(slider_size + 0.001, 1),
                    NumberSequenceKeypoint.new(1, 1)
                })
                settings.slider.Box.Glow.UIGradient.Transparency = NumberSequence.new({
                    NumberSequenceKeypoint.new(0, 0),
                    NumberSequenceKeypoint.new(slider_size, 0),
                    NumberSequenceKeypoint.new(slider_size + 0.03, 1),
                    NumberSequenceKeypoint.new(1, 1)
                })
                Library.flags[settings.flag] = number
                settings.slider.Number.Text = number
                if settings.callback then
                    settings.callback(number)
                end
                task.wait()
            end
        end

        function Module:create_slider(settings)
    local section = settings.section == "right" and self.right or self.left
    local SliderManager = {
        _value = settings.value or settings.min or 0
    }
    local slider = Instance.new("TextButton")
    slider.Name = "Slider"
    slider.Size = UDim2.new(0, 220, 0, 50)
    slider.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    slider.BorderColor3 = Color3.fromRGB(50, 50, 80)
    slider.BorderSizePixel = 1
    slider.AutoButtonColor = false
    slider.Font = Enum.Font.SourceSans
    slider.Text = ""
    slider.TextColor3 = Color3.fromRGB(0, 0, 0)
    slider.TextSize = 14
    slider.Parent = section
    slider.LayoutOrder = self._layout_order
    self._layout_order = self._layout_order + 1

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = slider

    local Box = Instance.new("Frame")
    Box.Name = "Box"
    Box.Size = UDim2.new(0, 190, 0, 10)
    Box.Position = UDim2.new(0.5, 0, 0.7, 0)
    Box.AnchorPoint = Vector2.new(0.5, 0.5)
    Box.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Box.BorderSizePixel = 0
    Box.Parent = slider

    if settings.desc then
    createDescription(slider, settings.desc, 0.75)
end

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.CornerRadius = UDim.new(0, 8)
    UICorner_2.Parent = Box

    local Glow = Instance.new("ImageLabel")
    Glow.Name = "Glow"
    Glow.Size = UDim2.new(0, 200, 0, 20)
    Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Glow.AnchorPoint = Vector2.new(0.5, 0.5)
    Glow.BackgroundTransparency = 1
    Glow.BorderSizePixel = 0
    Glow.Image = "rbxassetid://17381990533"
    Glow.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Glow.ImageTransparency = 0.7
    Glow.Parent = Box

    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 150))
    }
    UIGradient.Rotation = 45
    UIGradient.Parent = Glow

    local Fill = Instance.new("ImageLabel")
    Fill.Name = "Fill"
    Fill.Size = UDim2.new(0, 190, 0, 10)
    Fill.Position = UDim2.new(0, 0, 0.5, 0)
    Fill.AnchorPoint = Vector2.new(0, 0.5)
    Fill.BackgroundTransparency = 1
    Fill.BorderSizePixel = 0
    Fill.Image = "rbxassetid://17382033116"
    Fill.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Fill.Parent = Box

    local UICorner_3 = Instance.new("UICorner")
    UICorner_3.CornerRadius = UDim.new(0, 8)
    UICorner_3.Parent = Fill

    local Hitbox = Instance.new("TextButton")
    Hitbox.Name = "Hitbox"
    Hitbox.Size = UDim2.new(0, 200, 0, 20)
    Hitbox.Position = UDim2.new(0.5, 0, 0.5, 0)
    Hitbox.AnchorPoint = Vector2.new(0.5, 0.5)
    Hitbox.BackgroundTransparency = 1
    Hitbox.BorderSizePixel = 0
    Hitbox.ZIndex = 3
    Hitbox.AutoButtonColor = false
    Hitbox.Font = Enum.Font.SourceSans
    Hitbox.Text = ""
    Hitbox.TextColor3 = Color3.fromRGB(0, 0, 0)
    Hitbox.TextSize = 14
    Hitbox.Parent = Box

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(0, 150, 0, 16)
    Title.Position = UDim2.new(0.4, 0, 0.3, 0)
    Title.AnchorPoint = Vector2.new(0.5, 0.5)
    Title.BackgroundTransparency = 1
    Title.BorderSizePixel = 0
    Title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    Title.TextColor3 = Color3.fromRGB(200, 200, 255)
    Title.TextSize = 13
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Text = settings.name or "Slider"
    Title.Parent = slider

    local Number = Instance.new("TextLabel")
    Number.Name = "Number"
    Number.Size = UDim2.new(0, 40, 0, 16)
    Number.Position = UDim2.new(0.85, 0, 0.3, 0)
    Number.AnchorPoint = Vector2.new(0.5, 0.5)
    Number.BackgroundTransparency = 1
    Number.BorderSizePixel = 0
    Number.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    Number.TextColor3 = Color3.fromRGB(200, 200, 255)
    Number.TextSize = 13
    Number.TextXAlignment = Enum.TextXAlignment.Right
    Number.Text = tostring(SliderManager._value)
    Number.Parent = slider

    if not Library.flags[settings.flag] then
        Library.flags[settings.flag] = SliderManager._value
    end

    if Library.flags[settings.flag] then
        SliderManager._value = Library.flags[settings.flag]
        Number.Text = SliderManager._value
        local result = (SliderManager._value - settings.min) / (settings.max - settings.min)
        local slider_size = math.clamp(result, 0, 1)
        Fill.Size = UDim2.new(slider_size, 0, 0, 10)
    end

    function Module:slider_loop(settings)
        Library.slider_drag = true
        while Library.slider_drag do
            local mouseX = Mouse.X
            local boxPosX = settings.slider.Box.AbsolutePosition.X
            local boxSizeX = settings.slider.Box.AbsoluteSize.X
            local result = math.clamp((mouseX - boxPosX) / boxSizeX, 0, 1)
            local number = math.floor(((settings.max - settings.min) * result) + settings.min)
            local slider_size = math.clamp(result, 0, 1)
            TweenService:Create(Fill, TweenInfo.new(0.1, Enum.EasingStyle.Sine), {
                Size = UDim2.new(slider_size, 0, 0, 10)
            }):Play()
            Library.flags[settings.flag] = number
            settings.slider.Number.Text = number
            if settings.callback then
                settings.callback(number)
            end
            task.wait()
        end
    end

    function SliderManager:change_value(value)
        value = math.clamp(value, settings.min, settings.max)
        self._value = value
        Library.flags[settings.flag] = value
        Library:save_flags()
        Number.Text = tostring(value)
        local result = (value - settings.min) / (settings.max - settings.min)
        local slider_size = math.clamp(result, 0, 1)
        TweenService:Create(Fill, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = UDim2.new(slider_size, 0, 0, 10)
        }):Play()
        if settings.callback then
            settings.callback(value)
        end
    end

    Hitbox.MouseButton1Down:Connect(function()
        if Library.slider_drag then return end
        Module:slider_loop({ slider = slider, flag = settings.flag, callback = settings.callback, min = settings.min, max = settings.max })
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Library.slider_drag = false
            Library:save_flags()
        end
    end)

    return SliderManager
end

 function Module:create_dropdown(settings)
    local section = settings.section == "right" and self.right or self.left
    local DropdownManager = {
        _open = false,
        _size = 0
    }
    local dropdown = Instance.new("TextButton")
    dropdown.Name = "Dropdown"
    dropdown.Size = UDim2.new(0, 220, 0, 40)
    dropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    dropdown.BorderColor3 = Color3.fromRGB(50, 50, 80)
    dropdown.BorderSizePixel = 1
    dropdown.AutoButtonColor = false
    dropdown.Font = Enum.Font.SourceSans
    dropdown.Text = ""
    dropdown.TextColor3 = Color3.fromRGB(0, 0, 0)
    dropdown.TextSize = 14
    dropdown.Parent = section
    dropdown.LayoutOrder = self._layout_order
    self._layout_order = self._layout_order + 1

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = dropdown

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = dropdown

    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingTop = UDim.new(0, 8)
    UIPadding.Parent = dropdown

    local Box = Instance.new("Frame")
    Box.Name = "Box"
    Box.Size = UDim2.new(0, 200, 0, 28)
    Box.Position = UDim2.new(0.5, 0, 0.15, 0)
    Box.AnchorPoint = Vector2.new(0.5, 0)
    Box.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Box.BorderSizePixel = 0
    Box.ZIndex = 2
    Box.Parent = dropdown

if settings.desc then
    createDescription(dropdown, settings.desc, 0.85)
end

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.CornerRadius = UDim.new(0, 8)
    UICorner_2.Parent = Box

    -- Ganti Options jadi ScrollingFrame biar bisa scroll
    local Options = Instance.new("ScrollingFrame")
    Options.Name = "Options"
    Options.Size = UDim2.new(0, 200, 0, 0)
    Options.Position = UDim2.new(0.5, 0, 0.76, 0)
    Options.AnchorPoint = Vector2.new(0.5, 0)
    Options.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Options.BorderSizePixel = 0
    Options.ClipsDescendants = true
    Options.ScrollBarThickness = 4
    Options.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 150)
    Options.CanvasSize = UDim2.new(0, 0, 0, 0) -- Akan diupdate di refresh
    Options.Parent = Box

    local UICorner_3 = Instance.new("UICorner")
    UICorner_3.CornerRadius = UDim.new(0, 8)
    UICorner_3.Parent = Options

    local UIPadding_2 = Instance.new("UIPadding")
    UIPadding_2.PaddingLeft = UDim.new(0, 15)
    UIPadding_2.PaddingTop = UDim.new(0, 10)
    UIPadding_2.Parent = Options

    local UIListLayout_2 = Instance.new("UIListLayout")
    UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout_2.Padding = UDim.new(0, 10)
    UIListLayout_2.Parent = Options

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(0, 150, 0, 16)
    Title.Position = UDim2.new(0.43, 0, 0.5, 0)
    Title.AnchorPoint = Vector2.new(0.5, 0.5)
    Title.BackgroundTransparency = 1
    Title.BorderSizePixel = 0
    Title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    Title.TextColor3 = Color3.fromRGB(200, 200, 255)
    Title.TextSize = 13
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Text = settings.name or "Dropdown"
    Title.ZIndex = 3 -- Naikin biar ga ketutup
    Title.Parent = Box

    local SelectedText = Instance.new("TextLabel")
    SelectedText.Name = "SelectedText"
    SelectedText.Size = UDim2.new(0, 200, 0, 12)
    SelectedText.Position = UDim2.new(0.5, 0, 1, 5) -- Di bawah dropdown
    SelectedText.AnchorPoint = Vector2.new(0.5, 0)
    SelectedText.BackgroundTransparency = 1
    SelectedText.BorderSizePixel = 0
    SelectedText.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Regular)
    SelectedText.TextColor3 = Color3.fromRGB(150, 150, 200)
    SelectedText.TextSize = 10
    SelectedText.TextXAlignment = Enum.TextXAlignment.Center
    SelectedText.TextTransparency = 1 -- Mulai tersembunyi
    SelectedText.Text = ""
    SelectedText.ZIndex = 4 -- Pastiin di atas semua
    SelectedText.Parent = dropdown

    local Arrow = Instance.new("ImageLabel")
    Arrow.Name = "Arrow"
    Arrow.Size = UDim2.new(0, 14, 0, 14)
    Arrow.Position = UDim2.new(0.92, 0, 0.5, 0)
    Arrow.AnchorPoint = Vector2.new(0.5, 0.5)
    Arrow.BackgroundTransparency = 1
    Arrow.BorderSizePixel = 0
    Arrow.ZIndex = 3
    Arrow.Image = "rbxassetid://17400678941"
    Arrow.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Arrow.Parent = Box

    local option = Instance.new("TextButton")
    option.Name = "Option"
    option.Size = UDim2.new(0, 180, 0, 16)
    option.Position = UDim2.new(0.5, 0, 0.5, 0)
    option.AnchorPoint = Vector2.new(0.5, 0.5)
    option.BackgroundTransparency = 1
    option.BorderSizePixel = 0
    option.ZIndex = 3
    option.AutoButtonColor = false
    option.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    option.TextColor3 = Color3.fromRGB(200, 200, 255)
    option.TextSize = 13
    option.TextTransparency = 0.5
    option.TextXAlignment = Enum.TextXAlignment.Left

    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(0, 160, 0, 2)
    separator.BackgroundColor3 = Color3.fromRGB(100, 100, 150)
    separator.BackgroundTransparency = 0.7
    separator.BorderSizePixel = 0
    local SeparatorGradient = Instance.new("UIGradient")
    SeparatorGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(70, 70, 120)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 100, 150))
    }
    SeparatorGradient.Rotation = 45
    SeparatorGradient.Parent = separator

    if not Library.flags[settings.flag] then
        Library.flags[settings.flag] = settings.value or settings.options[1]
    end

    Title.Text = Library.flags[settings.flag]
    if settings.callback then
        settings.callback(Library.flags[settings.flag])
    end

    function DropdownManager:open()
        self._open = true
        local list_size = math.min(#settings.options * 26 + (#settings.options - 1) * 2, 100) -- Batasi tinggi maksimal 100px
        TweenService:Create(Options, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = UDim2.new(0, 200, 0, list_size)
        }):Play()
        TweenService:Create(dropdown, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = UDim2.new(0, 220, 0, 34 + list_size)
        }):Play()
        TweenService:Create(Arrow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Rotation = 180
        }):Play()
        TweenService:Create(SelectedText, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 1
        }):Play()
    end

    function DropdownManager:close()
        self._open = false
        TweenService:Create(Options, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = UDim2.new(0, 200, 0, 0)
        }):Play()
        TweenService:Create(dropdown, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Size = UDim2.new(0, 220, 0, 40)
        }):Play()
        TweenService:Create(Arrow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            Rotation = 0
        }):Play()
    end

    function DropdownManager:clear()
        for _, object in Options:GetChildren() do
            if object.Name == "Option" or object.Name == "Separator" then
                object:Destroy()
            end
        end
    end

    function DropdownManager:select_option(new_option)
        Library.flags[settings.flag] = new_option.Text
        Library:save_flags()
        Title.Text = new_option.Text
        SelectedText.Text = "Choosed: " .. new_option.Text
        TweenService:Create(SelectedText, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
        task.delay(2, function()
            if SelectedText.Text == "Terpilih: " .. new_option.Text then
                TweenService:Create(SelectedText, TweenInfo.new(0.5, Enum.EasingStyle.Sine), {
                    TextTransparency = 1
                }):Play()
            end
        end)
        TweenService:Create(new_option, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            TextTransparency = 0
        }):Play()
        for _, object in Options:GetChildren() do
            if object.Name == "Option" and object.Text ~= new_option.Text then
                TweenService:Create(object, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                    TextTransparency = 0.5
                }):Play()
            end
        end
        if settings.callback then
            settings.callback(new_option.Text)
        end
        self:close()
    end

    function DropdownManager:refresh()
        self:clear()
        local list_size = 0
        for i, value in ipairs(settings.options) do
            list_size = list_size + 26
            local new_option = option:Clone()
            new_option.Text = value
            new_option.Parent = Options
            new_option.TextTransparency = value == Library.flags[settings.flag] and 0 or 0.5
            new_option.MouseButton1Click:Connect(function()
                self:select_option(new_option)
            end)
            if i < #settings.options then
                local new_separator = separator:Clone()
                new_separator.Parent = Options
                list_size = list_size + 2
            end
        end
        self._size = list_size
        Options.CanvasSize = UDim2.new(0, 0, 0, list_size) -- Update CanvasSize buat scroll
        if self._open then
            self:open()
        end
    end

    dropdown.MouseButton1Click:Connect(function()
        if self._open then
            DropdownManager:close()
        else
            DropdownManager:open()
        end
    end)

    DropdownManager:refresh()
    return DropdownManager
end

        function Module:create_textbox(settings)
    local section = settings.section == "right" and self.right or self.left
    local TextboxManager = {}
    local textbox = Instance.new("TextButton")
    textbox.Name = "TextBox"
    textbox.Size = UDim2.new(0, 220, 0, 40)
    textbox.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
    textbox.BorderColor3 = Color3.fromRGB(50, 50, 80)
    textbox.BorderSizePixel = 1
    textbox.AutoButtonColor = false
    textbox.Font = Enum.Font.SourceSans
    textbox.Text = ""
    textbox.TextColor3 = Color3.fromRGB(0, 0, 0)
    textbox.TextSize = 14
    textbox.Parent = section
    textbox.LayoutOrder = self._layout_order
    self._layout_order = self._layout_order + 1

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = textbox

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = textbox

    local UIPadding = Instance.new("UIPadding")
    UIPadding.PaddingTop = UDim.new(0, 8)
    UIPadding.Parent = textbox

    local Box = Instance.new("Frame")
    Box.Name = "Box"
    Box.Size = UDim2.new(0, 200, 0, 28)
    Box.Position = UDim2.new(0.5, 0, 0.15, 0)
    Box.AnchorPoint = Vector2.new(0.5, 0)
    Box.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    Box.BorderSizePixel = 0
    Box.ZIndex = 2
    Box.Parent = textbox


    if settings.desc then
    createDescription(textbox, settings.desc, 0.75)
end

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.CornerRadius = UDim.new(0, 8)
    UICorner_2.Parent = Box

    local Glow = Instance.new("ImageLabel")
    Glow.Name = "Glow"
    Glow.Size = UDim2.new(0, 210, 0, 38)
    Glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Glow.AnchorPoint = Vector2.new(0.5, 0.5)
    Glow.BackgroundTransparency = 1
    Glow.BorderSizePixel = 0
    Glow.Image = "rbxassetid://17290798394" -- Glow sama kayak toggle
    Glow.ImageColor3 = Color3.fromRGB(100, 100, 150)
    Glow.ImageTransparency = 0.8 -- Lebih redup biar ga too much
    Glow.ZIndex = 1
    Glow.Parent = Box

    local TextHolder = Instance.new("TextBox")
    TextHolder.Name = "TextHolder"
    TextHolder.Size = UDim2.new(0, 180, 0, 16)
    TextHolder.Position = UDim2.new(0.5, 0, 0.5, 0)
    TextHolder.AnchorPoint = Vector2.new(0.5, 0.5)
    TextHolder.BackgroundTransparency = 1
    TextHolder.BorderSizePixel = 0
    TextHolder.ZIndex = 2
    TextHolder.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    TextHolder.TextColor3 = Color3.fromRGB(200, 200, 255)
    TextHolder.TextSize = 13
    TextHolder.TextXAlignment = Enum.TextXAlignment.Left
    TextHolder.Text = Library.flags[settings.flag] or settings.value or ""
    TextHolder.PlaceholderText = settings.name or "Textbox"
    TextHolder.PlaceholderColor3 = Color3.fromRGB(100, 100, 150)
    TextHolder.Parent = Box

    if not Library.flags[settings.flag] then
        Library.flags[settings.flag] = settings.value or ""
    end

    if settings.callback then
        settings.callback(Library.flags[settings.flag])
    end

    function TextboxManager:change_value(text)
        Library.flags[settings.flag] = text
        Library:save_flags()
        TextHolder.Text = text
        if settings.callback then
            settings.callback(text)
        end
    end

    -- Animasi fokus
    TextHolder.Focused:Connect(function()
        TweenService:Create(Box, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            BackgroundColor3 = Color3.fromRGB(50, 50, 80) -- Highlight pas fokus
        }):Play()
        TweenService:Create(Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageTransparency = 0.6 -- Glow nyala
        }):Play()
    end)

    TextHolder.FocusLost:Connect(function()
        TextboxManager:change_value(TextHolder.Text)
        TweenService:Create(Box, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            BackgroundColor3 = Color3.fromRGB(40, 40, 60) -- Balik ke normal
        }):Play()
        TweenService:Create(Glow, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
            ImageTransparency = 0.8 -- Glow redup lagi
        }):Play()
    end)

    -- Animasi placeholder kalau kosong
    TextHolder:GetPropertyChangedSignal("Text"):Connect(function()
        if TextHolder.Text == "" then
            TweenService:Create(TextHolder, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                TextTransparency = 0.4 -- Placeholder agak redup kalau kosong
            }):Play()
        else
            TweenService:Create(TextHolder, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                TextTransparency = 0 -- Teks jelas kalau ada isinya
            }):Play()
        end
    end)

    return TextboxManager
end

        function Module:create_keybind(settings)
            local section = settings.section == "right" and self.right or self.left
            local KeybindManager = {
                _keycode = settings.keycode and settings.keycode.Name or "None"
            }
            local keybind = Instance.new("TextButton")
            keybind.Name = "Keybind"
            keybind.Size = UDim2.new(0, 220, 0, 40)
            keybind.BackgroundColor3 = Color3.fromRGB(30, 30, 50)
            keybind.BorderColor3 = Color3.fromRGB(50, 50, 80)
            keybind.BorderSizePixel = 1
            keybind.AutoButtonColor = false
            keybind.Font = Enum.Font.SourceSans
            keybind.Text = ""
            keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
            keybind.TextSize = 14
            keybind.Parent = section
            keybind.LayoutOrder = self._layout_order
            self._layout_order = self._layout_order + 1

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 8)
            UICorner.Parent = keybind

            local Title = Instance.new("TextLabel")
            Title.Size = UDim2.new(0, 160, 0, 16)
            Title.Position = UDim2.new(0.4, 0, 0.5, 0)
            Title.AnchorPoint = Vector2.new(0.5, 0.5)
            Title.BackgroundTransparency = 1
            Title.BorderSizePixel = 0
            Title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
            Title.TextColor3 = Color3.fromRGB(200, 200, 255)
            Title.TextSize = 13
            Title.TextXAlignment = Enum.TextXAlignment.Left
            Title.Text = settings.name or "Keybind"
            Title.Parent = keybind

            if settings.desc then
    createDescription(keybind, settings.desc, 0.75)
end
            local Box = Instance.new("Frame")
            Box.Name = "Box"
            Box.Size = UDim2.new(0, 30, 0, 24)
            Box.Position = UDim2.new(0.85, 0, 0.5, 0)
            Box.AnchorPoint = Vector2.new(0.5, 0.5)
            Box.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
            Box.BorderSizePixel = 0
            Box.Parent = keybind

            local UICorner_2 = Instance.new("UICorner")
            UICorner_2.CornerRadius = UDim.new(0, 6)
            UICorner_2.Parent = Box

            local KeyLabel = Instance.new("TextLabel")
            KeyLabel.Size = UDim2.new(0, 30, 0, 16)
            KeyLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
            KeyLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            KeyLabel.BackgroundTransparency = 1
            KeyLabel.BorderSizePixel = 0
            KeyLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
            KeyLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
            KeyLabel.TextSize = 12
            KeyLabel.Text = Library.flags[settings.flag] or KeybindManager._keycode
            KeyLabel.Parent = Box

            if not Library.flags[settings.flag] then
                Library.flags[settings.flag] = KeybindManager._keycode
            end

            function KeybindManager:change_keybind(keycode)
                self._keycode = keycode
                Library.flags[settings.flag] = keycode
                Library:save_flags()
                KeyLabel.Text = keycode
                if settings.callback then
                    settings.callback(keycode)
                end
            end

            keybind.MouseButton1Click:Connect(function()
                if self._choosing_keybind then return end
                self._choosing_keybind = true
                KeyLabel.Text = "..."
                local connection
                connection = UserInputService.InputBegan:Connect(function(input, processed)
                    if processed then return end
                    if input.KeyCode == Enum.KeyCode.Unknown then return end
                    KeybindManager:change_keybind(input.KeyCode.Name)
                    self._choosing_keybind = false
                    connection:Disconnect()
                end)
            end)

            UserInputService.InputBegan:Connect(function(input, processed)
                if processed then return end
                if input.KeyCode.Name == Library.flags[settings.flag] then
                    if settings.callback then
                        settings.callback(input.KeyCode.Name)
                    end
                end
            end)

            return KeybindManager
        end

        function Module:create_checkbox(settings)
    local section = settings.section == "right" and self.right or self.left
    local CheckboxManager = {
        _state = settings.enabled or false,
        _keybind = settings.keybind or nil
    }
    local Checkbox = Instance.new("TextButton")
    Checkbox.Name = "Checkbox"
    Checkbox.Size = UDim2.new(0, 220, 0, settings.desc and 60 or 24) -- Tambah tinggi
    Checkbox.BackgroundTransparency = 1
    Checkbox.Parent = section
    Checkbox.LayoutOrder = self._layout_order
    self._layout_order = self._layout_order + 1
    Checkbox.AutoButtonColor = false
    Checkbox.Text = ""

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(0, 180, 0, 16)
    Title.Position = UDim2.new(0, 0, settings.desc and 0.3 or 0.5, 0) -- Geser ke atas
    Title.AnchorPoint = Vector2.new(0, 0.5)
    Title.BackgroundTransparency = 1
    Title.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
    Title.TextColor3 = Color3.fromRGB(200, 200, 255)
    Title.TextTransparency = 0.2
    Title.TextSize = 12
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Text = settings.name or "Checkbox"
    Title.Parent = Checkbox

    if settings.desc then
    createDescription(Checkbox, settings.desc, 0.75)
end

            local Box = Instance.new("Frame")
            Box.Size = UDim2.new(0, 20, 0, 20)
            Box.Position = UDim2.new(1, -20, 0.5, 0)
            Box.AnchorPoint = Vector2.new(1, 0.5)
            Box.BackgroundColor3 = Color3.fromRGB(100, 100, 150)
            Box.BackgroundTransparency = CheckboxManager._state and 0.6 or 0.8
            Box.BorderSizePixel = 0
            Box.Parent = Checkbox

            local UICorner = Instance.new("UICorner")
            UICorner.CornerRadius = UDim.new(0, 6)
            UICorner.Parent = Box

            local Fill = Instance.new("Frame")
            Fill.Name = "Fill"
            Fill.Size = CheckboxManager._state and UDim2.new(0, 14, 0, 14) or UDim2.new(0, 0, 0, 0)
            Fill.Position = UDim2.new(0.5, 0, 0.5, 0)
            Fill.AnchorPoint = Vector2.new(0.5, 0.5)
            Fill.BackgroundColor3 = Color3.fromRGB(100, 100, 150)
            Fill.BackgroundTransparency = 0.2
            Fill.BorderSizePixel = 0
            Fill.Parent = Box

            local FillCorner = Instance.new("UICorner")
            FillCorner.CornerRadius = UDim.new(0, 5)
            FillCorner.Parent = Fill

            local KeybindBox = Instance.new("Frame")
            KeybindBox.Name = "KeybindBox"
            KeybindBox.Size = UDim2.new(0, 34, 0, 20)
            KeybindBox.Position = UDim2.new(1, -44, 0.5, 0)
            KeybindBox.AnchorPoint = Vector2.new(1, 0.5)
            KeybindBox.BackgroundColor3 = Color3.fromRGB(100, 100, 150)
            KeybindBox.BackgroundTransparency = 0.8
            KeybindBox.BorderSizePixel = 0
            KeybindBox.Parent = Checkbox

            local KeybindCorner = Instance.new("UICorner")
            KeybindCorner.CornerRadius = UDim.new(0, 6)
            KeybindCorner.Parent = KeybindBox

            local KeybindLabel = Instance.new("TextLabel")
            KeybindLabel.Size = UDim2.new(1, 0, 1, 0)
            KeybindLabel.BackgroundTransparency = 1
            KeybindLabel.TextColor3 = Color3.fromRGB(200, 200, 255)
            KeybindLabel.TextSize = 11
            KeybindLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
            KeybindLabel.Text = Library.flags[settings.flag .. "_keybind"] or "None"
            KeybindLabel.TextXAlignment = Enum.TextXAlignment.Center
            KeybindLabel.Parent = KeybindBox

            if not Library.flags[settings.flag] then
                Library.flags[settings.flag] = CheckboxManager._state
            end

            if Library.flags[settings.flag] ~= nil then
                CheckboxManager._state = Library.flags[settings.flag]
            end

            function CheckboxManager:change_state(state)
                self._state = state
                Library.flags[settings.flag] = state
                Library:save_flags()
                TweenService:Create(Box, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                    BackgroundTransparency = state and 0.6 or 0.8
                }):Play()
                TweenService:Create(Fill, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                    Size = state and UDim2.new(0, 14, 0, 14) or UDim2.new(0, 0, 0, 0)
                }):Play()
                if settings.callback then
                    settings.callback(state)
                end
            end

            function CheckboxManager:connect_keybind()
                if Library.flags[settings.flag .. "_keybind"] then
                    Library.connections[settings.flag .. "_keybind"] = UserInputService.InputBegan:Connect(function(input, processed)
                        if processed then return end
                        if input.KeyCode.Name == Library.flags[settings.flag .. "_keybind"] then
                            CheckboxManager:change_state(not CheckboxManager._state)
                        end
                    end)
                end
            end

            function CheckboxManager:scale_keybind(empty)
                local keybind_string = empty and "None" or Library.flags[settings.flag .. "_keybind"]
                local font_params = Instance.new("GetTextBoundsParams")
                font_params.Text = keybind_string
                font_params.Font = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.SemiBold)
                font_params.Size = 11
                font_params.Width = 10000
                local font_size = TextService:GetTextBoundsAsync(font_params)
                KeybindBox.Size = UDim2.new(0, font_size.X + 8, 0, 20)
                KeybindLabel.Size = UDim2.new(0, font_size.X, 0, 16)
                KeybindLabel.Text = keybind_string
            end

            Checkbox.MouseButton1Click:Connect(function()
                CheckboxManager:change_state(not CheckboxManager._state)
            end)

            Checkbox.InputBegan:Connect(function(input, processed)
                if processed then return end
                if input.UserInputType ~= Enum.UserInputType.MouseButton3 then return end
                if Library._choosing_keybind then return end
                Library._choosing_keybind = true
                KeybindLabel.Text = "..."
                local chooseConnection
                chooseConnection = UserInputService.InputBegan:Connect(function(keyInput, processed)
                    if processed then return end
                    if keyInput.KeyCode == Enum.KeyCode.Unknown then return end
                    if keyInput.KeyCode == Enum.KeyCode.Backspace then
                        CheckboxManager:scale_keybind(true)
                Library.flags[settings.flag .. "_keybind"] = nil
                Library:save_flags()
                if Library.connections[settings.flag .. "_keybind"] then
                    Library.connections[settings.flag .. "_keybind"]:Disconnect()
                    Library.connections[settings.flag .. "_keybind"] = nil
                end
                chooseConnection:Disconnect()
                Library._choosing_keybind = false
                return
            end
            Library.flags[settings.flag .. "_keybind"] = keyInput.KeyCode.Name
            Library:save_flags()
            if Library.connections[settings.flag .. "_keybind"] then
                Library.connections[settings.flag .. "_keybind"]:Disconnect()
            end
            CheckboxManager:connect_keybind()
            CheckboxManager:scale_keybind()
            Library._choosing_keybind = false
            chooseConnection:Disconnect()
        end)
    end)

    if Library.flags[settings.flag .. "_keybind"] then
        CheckboxManager:scale_keybind()
        CheckboxManager:connect_keybind()
    end

    if Library.flags[settings.flag] then
        CheckboxManager:change_state(Library.flags[settings.flag])
    end

    return CheckboxManager
end

        return Module
    end

    self.container = container
    self.Container = Container
    self.Shadow = Shadow
    self.Mobile = mobile_button
    return TabManager
end

return Library
